{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Introduction","text":"<p>PHPWord is a library written in pure PHP that provides a set ofclasses to write to different document file formats, i.e. Microsoft Office Open XML(<code>.docx</code>), OASIS Open Document Format for Office Applications (<code>.odt</code>), Rich Text Format (<code>.rtf</code>), Microsoft Word Binary File (<code>.doc</code>), HTML (<code>.html</code>), and PDF (<code>.pdf</code>).</p> <p>PHPWord is an open source project licensed under the terms of LGPL version 3. PHPWord is aimed to be a high quality software product by incorporating continuous integration and unit testing. You can learn more about PHPWord by reading this Developers'Documentation.</p>"},{"location":"index.html#features","title":"Features","text":"<ul> <li>Set document properties, e.g. title, subject, and creator.</li> <li>Create document sections with different settings, e.g. portrait/landscape, page size, and page numbering</li> <li>Create header and footer for each sections</li> <li>Set default font type, font size, and paragraph style</li> <li>Use UTF-8 and East Asia fonts/characters</li> <li>Define custom font styles (e.g. bold, italic, color) and paragraph styles (e.g. centered, multicolumns, spacing) either as named style or inline in text</li> <li>Insert paragraphs, either as a simple text or complex one (a text run) that contains other elements</li> <li>Insert titles (headers) and table of contents</li> <li>Insert text breaks and page breaks</li> <li>Insert and format images, either local, remote, or as page watermarks</li> <li>Insert binary OLE Objects such as Excel or Visio</li> <li>Insert and format table with customized properties for each rows (e.g. repeat as header row) and cells (e.g. background color, rowspan, colspan)</li> <li>Insert list items as bulleted, numbered, or multilevel</li> <li>Insert hyperlinks</li> <li>Insert footnotes and endnotes</li> <li>Insert drawing shapes (arc, curve, line, polyline, rect, oval)</li> <li>Insert charts (pie, doughnut, bar, line, area, scatter, radar)</li> <li>Insert form fields (textinput, checkbox, and dropdown)</li> <li>Create document from templates</li> <li>Use XSL 1.0 style sheets to transform headers, main document part, and footers of an OOXML template</li> <li>... and many more features on progress</li> </ul>"},{"location":"index.html#file-formats","title":"File formats","text":"<p>Below are the supported features for each file formats.</p>"},{"location":"index.html#writers","title":"Writers","text":"Features OOXML ODF RTF HTML PDF Document Properties Standard Custom Element Type Text Text Run Title Link Preserve Text Text Break Page Break List Table Image Object Watermark Table of Contents Header Footer Footnote Endnote Comments Graphs 2D basic graphs 2D advanced graphs 3D graphs Math OMML support MathML support Bonus Encryption Protection"},{"location":"index.html#readers","title":"Readers","text":"Features OOXML DOC ODF RTF HTML Document Properties Standard Custom Element Type Text Text Run Title Link Preserve Text Text Break Page Break List Table Image Object Watermark Table of Contents Header Footer Footnote Endnote Comments Graphs 2D basic graphs 2D advanced graphs 3D graphs Math OMML support MathML support Bonus Encryption Protection"},{"location":"index.html#contributing","title":"Contributing","text":"<p>We welcome everyone to contribute to PHPWord. Below are some of the things that you can do to contribute:</p> <ul> <li>Read our contributing guide</li> <li>Fork us and request a pull to the master branch</li> <li>Submit bug reports or feature requests to GitHub</li> <li>Follow @PHPOffice on Twitter</li> </ul>"},{"location":"credits.html","title":"Credits","text":"<p>Images from chart page come from the LibreOffice Core.</p> <p>Some definitions come from the Office Open XML.</p>"},{"location":"credits.html#references","title":"References","text":""},{"location":"credits.html#openxml","title":"OpenXML","text":"<p>Known as \"ISO/IEC 29500, Third edition, 2012-09-01\"</p> <p>ISO :</p> <ul> <li>Part 1: Fundamentals and Markup Language Reference</li> <li>Part 2: Open Packaging Conventions</li> <li>Part 3: Markup Compatibility and Extensibility</li> <li>Part 4: Transitional Migration Features</li> </ul> <p>MSDN :</p> <ul> <li>Open XML SDK 2.5 with Validator</li> <li>DocumentFormat.OpenXml.Wordprocessing Namespace on MSDN</li> </ul> <p>Library of Congress :</p> <ul> <li>OOXML Format Family -- ISO/IEC 29500 and ECMA 376</li> <li>Schemas in W3C XML Schema language and in RELAX NG for the Strict variant of PPTX, etc.</li> </ul>"},{"location":"credits.html#opendocument","title":"OpenDocument","text":"<ul> <li>Oasis OpenDocument Standard Version 1.2</li> <li>Schema Central Open Document 1.1</li> </ul>"},{"location":"credits.html#rich-text-format","title":"Rich Text Format","text":"<ul> <li>Rich Text Format (RTF) Specification, version 1.9.1</li> </ul>"},{"location":"credits.html#word-97","title":"Word 97","text":""},{"location":"faq.html","title":"Frequently asked questions","text":""},{"location":"faq.html#how-contribute-to-phpword","title":"How contribute to PHPWord?","text":"<ul> <li>Improve the documentation</li> </ul>"},{"location":"howto.html","title":"How to","text":""},{"location":"howto.html#create-float-left-image","title":"Create float left image","text":"<p>Use absolute positioning relative to margin horizontally and to line vertically.</p> <pre><code>&lt;?php\n\n$imageStyle = array(\n    'width' =&gt; 40,\n    'height' =&gt; 40,\n    'wrappingStyle' =&gt; 'square',\n    'positioning' =&gt; 'absolute',\n    'posHorizontalRel' =&gt; 'margin',\n    'posVerticalRel' =&gt; 'line',\n);\n$textrun-&gt;addImage(__DIR__ . '/resources/_earth.jpg', $imageStyle);\n</code></pre>"},{"location":"howto.html#download-the-produced-file-automatically","title":"Download the produced file automatically","text":"<p>Use <code>php://output</code> as the filename.</p> <pre><code>&lt;?php\n\n$phpWord = new \\PhpOffice\\PhpWord\\PhpWord();\n$section = $phpWord-&gt;addSection();\n$section-&gt;addText('Hello World!');\n$file = 'HelloWorld.docx';\nheader(\"Content-Description: File Transfer\");\nheader('Content-Disposition: attachment; filename=\"' . $file . '\"');\nheader('Content-Type: application/vnd.openxmlformats-officedocument.wordprocessingml.document');\nheader('Content-Transfer-Encoding: binary');\nheader('Cache-Control: must-revalidate, post-check=0, pre-check=0');\nheader('Expires: 0');\n$xmlWriter = \\PhpOffice\\PhpWord\\IOFactory::createWriter($phpWord, 'Word2007');\n$xmlWriter-&gt;save(\"php://output\");\n</code></pre>"},{"location":"howto.html#create-numbered-headings","title":"Create numbered headings","text":"<p>Define a numbering style and title styles, and match the two styles (with <code>pStyle</code> and <code>numStyle</code>) like below.</p> <pre><code>&lt;?php\n\n$phpWord-&gt;addNumberingStyle(\n    'hNum',\n    array('type' =&gt; 'multilevel', 'levels' =&gt; array(\n        array('pStyle' =&gt; 'Heading1', 'format' =&gt; 'decimal', 'text' =&gt; '%1'),\n        array('pStyle' =&gt; 'Heading2', 'format' =&gt; 'decimal', 'text' =&gt; '%1.%2'),\n        array('pStyle' =&gt; 'Heading3', 'format' =&gt; 'decimal', 'text' =&gt; '%1.%2.%3'),\n        )\n    )\n);\n$phpWord-&gt;addTitleStyle(1, array('size' =&gt; 16), array('numStyle' =&gt; 'hNum', 'numLevel' =&gt; 0));\n$phpWord-&gt;addTitleStyle(2, array('size' =&gt; 14), array('numStyle' =&gt; 'hNum', 'numLevel' =&gt; 1));\n$phpWord-&gt;addTitleStyle(3, array('size' =&gt; 12), array('numStyle' =&gt; 'hNum', 'numLevel' =&gt; 2));\n\n$section-&gt;addTitle('Heading 1', 1);\n$section-&gt;addTitle('Heading 2', 2);\n$section-&gt;addTitle('Heading 3', 3);\n</code></pre>"},{"location":"howto.html#add-a-link-within-a-title","title":"Add a link within a title","text":"<p>Apply 'HeadingN' paragraph style to TextRun or Link. Sample code:</p> <pre><code>&lt;?php\n\n$phpWord = new \\PhpOffice\\PhpWord\\PhpWord();\n$phpWord-&gt;addTitleStyle(1, array('size' =&gt; 16, 'bold' =&gt; true));\n$phpWord-&gt;addTitleStyle(2, array('size' =&gt; 14, 'bold' =&gt; true));\n$phpWord-&gt;addFontStyle('Link', array('color' =&gt; '0000FF', 'underline' =&gt; 'single'));\n\n$section = $phpWord-&gt;addSection();\n\n// Textrun\n$textrun = $section-&gt;addTextRun('Heading1');\n$textrun-&gt;addText('The ');\n$textrun-&gt;addLink('https://github.com/PHPOffice/PHPWord', 'PHPWord', 'Link');\n\n// Link\n$section-&gt;addLink('https://github.com/', 'GitHub', 'Link', 'Heading2');\n</code></pre>"},{"location":"howto.html#remove-compatibility-mode-text-in-the-ms-word-title-bar","title":"Remove [Compatibility Mode] text in the MS Word title bar","text":"<p>Use the <code>Metadata\\Compatibility\\setOoxmlVersion(n)</code> method with <code>n</code> is the version of Office:</p> <ul> <li>14 = Office 2010</li> <li>15 = Office 2013</li> </ul> <pre><code>&lt;?php\n\n$phpWord-&gt;getCompatibility()-&gt;setOoxmlVersion(15);\n</code></pre>"},{"location":"install.html","title":"Installation","text":""},{"location":"install.html#requirements","title":"Requirements","text":"<p>Mandatory:</p> <ul> <li>PHP 7.1+</li> <li>PHP DOM extension</li> <li>PHP JSON extension</li> <li>PHP XML Parser extension</li> <li>PHP XMLWriter extension</li> </ul>"},{"location":"install.html#installation_1","title":"Installation","text":"<p>There are two ways to install PHPWord, i.e. via Composer or manually by downloading the library.</p>"},{"location":"install.html#using-composer","title":"Using Composer","text":"<p>To install via Composer, add the following lines to your <code>composer.json</code>:</p> <pre><code>{\n    \"require\": {\n        \"phpoffice/phpword\": \"dev-master\"\n    }\n}\n</code></pre>"},{"location":"install.html#using-manual-install","title":"Using manual install","text":"<p>To install manually:</p> <ul> <li>download PHPOffice\\PHPWord package from GitHub</li> <li>extract the package and put the contents to your machine.</li> </ul> <pre><code>&lt;?php\n\nrequire_once 'path/to/PHPWord/src/PhpWord/Autoloader.php';\n\\PhpOffice\\PhpWord\\Autoloader::register();\n</code></pre> <p>The preferred method is the Composer one.</p>"},{"location":"install.html#configuration","title":"Configuration","text":"<p>In order to configure you can create phpword.ini file and load configuration by calling Settings::loadConfig</p> <pre><code>&lt;?php\n\nSettings::loadConfig();\n</code></pre> <p>You can also specify the config file location. (Do not use phpword.ini file in vendor folder)</p> <pre><code>&lt;?php\n\nSettings::loadConfig(__DIR__ . '/../../phpword.ini');\n</code></pre>"},{"location":"install.html#samples","title":"Samples","text":"<p>After installation, you can browse and use the samples that we've provided, either by command line or using browser. If you can access your PhpWord library folder using browser, point your browser to the <code>samples</code> folder, e.g. <code>http://localhost/PhpWord/samples/</code>.</p>"},{"location":"changes/0.x/0.10.0.html","title":"0.10.0 (4 May 2014)","text":"<p>This release marked heavy refactorings on internal code structure with the creation of some abstract classes to reduce code duplication. <code>Element</code> subnamespace is introduced in this release to replace <code>Section</code>. Word2007 reader capability is greatly enhanced. Endnote is introduced. List numbering is now customizable. Basic HTML and PDF writing support is enabled. Basic ODText reader is introduced.</p>"},{"location":"changes/0.x/0.10.0.html#features","title":"Features","text":"<ul> <li>Image: Get image dimensions without EXIF extension - @andrew-kzoo #184</li> <li>Table: Add <code>tblGrid</code> element for Libre/Open Office table sizing - @gianis6 #183</li> <li>Footnote: Ability to insert textbreak in footnote <code>$footnote-&gt;addTextBreak()</code> - @ivanlanin</li> <li>Footnote: Ability to style footnote reference mark by using <code>FootnoteReference</code> style - @ivanlanin</li> <li>Font: Add <code>bgColor</code> to font style to define background using HEX color - @jcarignan #168</li> <li>Table: Add <code>exactHeight</code> to row style to define whether row height should be exact or atLeast - @jcarignan #168</li> <li>Element: New <code>CheckBox</code> element for sections and table cells - @ozilion #156</li> <li>Settings: Ability to use PCLZip as alternative to ZipArchive - @bskrtich @ivanlanin #106, #140, #185</li> <li>Template: Ability to find &amp; replace variables in headers &amp; footers - @dgudgeon #190</li> <li>Template: Ability to clone &amp; delete block of text using <code>cloneBlock</code> and <code>deleteBlock</code> - @diego-vieira #191</li> <li>TOC: Ability to have two or more TOC in one document and to set min and max depth for TOC - @Pyreweb #189</li> <li>Table: Ability to add footnote in table cell - @ivanlanin #187</li> <li>Footnote: Ability to add image in footnote - @ivanlanin #187</li> <li>ListItem: Ability to add list item in header/footer - @ivanlanin #187</li> <li>CheckBox: Ability to add checkbox in header/footer - @ivanlanin #187</li> <li>Link: Ability to add link in header/footer - @ivanlanin #187</li> <li>Object: Ability to add object in header, footer, textrun, and footnote - @ivanlanin #187</li> <li>Media: Add <code>Media::resetElements()</code> to reset all media data - @juzi #19</li> <li>General: Add <code>Style::resetStyles()</code> - @ivanlanin #187</li> <li>DOCX Reader: Ability to read header, footer, footnotes, link, preservetext, textbreak, pagebreak, table, list, image, and title - @ivanlanin</li> <li>Endnote: Ability to add endnotes - @ivanlanin</li> <li>ListItem: Ability to create custom list and reset list number - @ivanlanin #10, #198</li> <li>ODT Writer: Basic table writing support - @ivanlanin</li> <li>Image: Keep image aspect ratio if only 1 dimension styled - @japonicus #194</li> <li>HTML Writer: Basic HTML writer: text, textrun, link, title, textbreak, table, image (as Base64), footnote, endnote - @ivanlanin #203, #67, #147</li> <li>PDF Writer: Basic PDF writer using DomPDF: All HTML element except image - @ivanlanin #68</li> <li>DOCX Writer: Change <code>docProps/app.xml</code> <code>Application</code> to <code>PHPWord</code> - @ivanlanin</li> <li>DOCX Writer: Create <code>word/settings.xml</code> and <code>word/webSettings.xml</code> dynamically - @ivanlanin</li> <li>ODT Writer: Basic image writing - @ivanlanin</li> <li>ODT Writer: Link writing - @ivanlanin</li> <li>ODT Reader: Basic ODText Reader - @ivanlanin #71</li> <li>Section: Ability to define gutter and line numbering - @ivanlanin</li> <li>Font: Small caps, all caps, and double strikethrough - @ivanlanin #151</li> <li>Settings: Ability to use measurement unit other than twips with <code>setMeasurementUnit</code> - @ivanlanin #199</li> <li>Style: Remove <code>bgColor</code> from <code>Font</code>, <code>Table</code>, and <code>Cell</code> and put it into the new <code>Shading</code> style - @ivanlanin</li> <li>Style: New <code>Indentation</code> and <code>Spacing</code> style - @ivanlanin</li> <li>Paragraph: Ability to define first line and right indentation - @ivanlanin</li> </ul>"},{"location":"changes/0.x/0.10.0.html#bugfixes","title":"Bugfixes","text":"<ul> <li>Footnote: Footnote content doesn't show footnote reference number - @ivanlanin #170</li> <li>Documentation: Error in a function - @theBeerNut #195</li> </ul>"},{"location":"changes/0.x/0.10.0.html#deprecated","title":"Deprecated","text":"<ul> <li><code>createTextRun</code> replaced by <code>addTextRun</code></li> <li><code>createFootnote</code> replaced by <code>addFootnote</code></li> <li><code>createHeader</code> replaced by <code>addHeader</code></li> <li><code>createFooter</code> replaced by <code>addFooter</code></li> <li><code>createSection</code> replaced by <code>addSection</code></li> <li><code>Element\\Footnote::getReferenceId</code> replaced by <code>Element\\AbstractElement::getRelationId</code></li> <li><code>Element\\Footnote::setReferenceId</code> replaced by <code>Element\\AbstractElement::setRelationId</code></li> <li><code>Footnote::addFootnoteLinkElement</code> replaced by <code>Media::addElement</code></li> <li><code>Footnote::getFootnoteLinkElements</code> replaced by <code>Media::getElements</code></li> <li>All current methods on <code>Media</code></li> <li><code>Element\\Link::getLinkSrc</code> replaced by <code>Element\\Link::getTarget</code></li> <li><code>Element\\Link::getLinkName</code> replaced by <code>Element\\Link::getText</code></li> <li><code>Style\\Cell::getDefaultBorderColor</code></li> </ul>"},{"location":"changes/0.x/0.10.0.html#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Documentation: Simplify page level docblock - @ivanlanin #179</li> <li>Writer: Refactor writer classes and create a new <code>Write\\AbstractWriter</code> abstract class - @ivanlanin #160</li> <li>General: Refactor folders: <code>Element</code> and <code>Exception</code> - @ivanlanin #187</li> <li>General: Remove legacy <code>HashTable</code> and <code>Shared\\ZipStreamWrapper</code> and all related properties/methods - @ivanlanin #187</li> <li>Element: New <code>AbstractElement</code> abstract class - @ivanlanin #187</li> <li>Media: Refactor media class to use one method for all docPart (section, header, footer, footnote) - @ivanlanin #187</li> <li>General: Remove underscore prefix from all private properties name - @ivanlanin #187</li> <li>General: Move Section <code>Settings</code> to <code>Style\\Section</code> - @ivanlanin #187</li> <li>General: Give <code>Abstract</code> prefix and <code>Interface</code> suffix for all abstract classes and interfaces as per PHP-FIG recommendation - @ivanlanin #187</li> <li>Style: New <code>Style\\AbstractStyle</code> abstract class - @ivanlanin #187</li> <li>Writer: New 'ODText\\Base` class - @ivanlanin #187</li> <li>General: Rename <code>Footnote</code> to <code>Footnotes</code> to reflect the nature of collection - @ivanlanin</li> <li>General: Add some unit tests for Shared &amp; Element (100%!) - @Progi1984</li> <li>Test: Add some samples and tests for image wrapping style - @brunocasado #59</li> <li>Refactor: Remove Style\\Tabs - @ivanlanin</li> <li>Refactor: Apply composite pattern for writers - @ivanlanin</li> <li>Refactor: Split <code>AbstractContainer</code> from <code>AbstractElement</code> - @ivanlanin</li> <li>Refactor: Apply composite pattern for Word2007 reader - @ivanlanin</li> </ul>"},{"location":"changes/0.x/0.10.1.html","title":"0.10.1 (21 May 2014)","text":"<p>This is a bugfix release for <code>php-zip</code> requirement in Composer.</p> <ul> <li>Change Composer requirements for php-zip from <code>require</code> to <code>suggest</code> - @bskrtich #246</li> </ul>"},{"location":"changes/0.x/0.11.0.html","title":"0.11.0 (1 June 2014)","text":"<p>This release marked the change of PHPWord license from LGPL 2.1 to LGPL 3. Four new elements were added: TextBox, ListItemRun, Field, and Line. Relative and absolute positioning for images and textboxes were added. Writer classes were refactored into parts, elements, and styles. ODT and RTF features were enhanced. Ability to add elements to PHPWord object via HTML were implemented. RTF and HTML reader were initiated.</p>"},{"location":"changes/0.x/0.11.0.html#features","title":"Features","text":"<ul> <li>Image: Ability to define relative and absolute positioning - @basjan #217</li> <li>Footer: Conform footer with header by adding firstPage, evenPage and by inheritance - @basjan @ivanlanin #219</li> <li>Element: New <code>TextBox</code> element - @basjan @ivanlanin #228, #229, #231</li> <li>HTML: Ability to add elements to PHPWord object via html - @basjan #231</li> <li>Element: New <code>ListItemRun</code> element that can add a list item with inline formatting like a textrun - @basjan #235</li> <li>Table: Ability to add table inside a cell (nested table) - @ivanlanin #149</li> <li>RTF Writer: UTF8 support for RTF: Internal UTF8 text is converted to Unicode before writing - @ivanlanin #158</li> <li>Table: Ability to define table width (in percent and twip) and position - @ivanlanin #237</li> <li>RTF Writer: Ability to add links and page breaks in RTF - @ivanlanin #196</li> <li>ListItemRun: Remove fontStyle parameter because ListItemRun is inherited from TextRun and TextRun doesn't have fontStyle - @ivanlanin</li> <li>Config: Ability to use a config file to store various common settings - @ivanlanin #200</li> <li>ODT Writer: Enable inline font style in TextRun - @ivanlanin</li> <li>ODT Writer: Enable underline, strike/doublestrike, smallcaps/allcaps, superscript/subscript font style - @ivanlanin</li> <li>ODT Writer: Enable section and column - @ivanlanin</li> <li>PDF Writer: Add TCPDF and mPDF as optional PDF renderer library - @ivanlanin</li> <li>ODT Writer: Enable title element and custom document properties - @ivanlanin</li> <li>ODT Reader: Ability to read standard and custom document properties - @ivanlanin</li> <li>Word2007 Writer: Enable the missing custom document properties writer - @ivanlanin</li> <li>Image: Enable \"image float left\" - @ivanlanin #244</li> <li>RTF Writer: Ability to write document properties - @ivanlanin</li> <li>RTF Writer: Ability to write image - @ivanlanin</li> <li>Element: New <code>Field</code> element - @basjan #251</li> <li>RTF Reader: Basic RTF reader - @ivanlanin #72, #252</li> <li>Element: New <code>Line</code> element - @basjan #253</li> <li>Title: Ability to apply numbering in heading - @ivanlanin #193</li> <li>HTML Reader: Basic HTML reader - @ivanlanin #80, #254</li> <li>RTF Writer: Basic table writing - @ivanlanin #245</li> </ul>"},{"location":"changes/0.x/0.11.0.html#bugfixes","title":"Bugfixes","text":"<ul> <li>Header: All images added to the second header were assigned to the first header - @basjan #222</li> <li>Conversion: Fix conversion from cm to pixel, pixel to cm, and pixel to point - @basjan #233, #234</li> <li>PageBreak: Page break adds new line in the beginning of the new page - @ivanlanin #150</li> <li>Image: <code>marginLeft</code> and <code>marginTop</code> cannot accept float value - @ivanlanin #248</li> <li>Title: Orphan <code>w:fldChar</code> caused OpenOffice to crash when opening DOCX - @ivanlanin #236</li> </ul>"},{"location":"changes/0.x/0.11.0.html#deprecated","title":"Deprecated","text":"<ul> <li>Static classes <code>Footnotes</code>, <code>Endnotes</code>, and <code>TOC</code></li> <li><code>Writer\\Word2007\\Part</code>: <code>Numbering::writeNumbering()</code>, <code>Settings::writeSettings()</code>, <code>WebSettings::writeWebSettings()</code>, <code>ContentTypes::writeContentTypes()</code>, <code>Styles::writeStyles()</code>, <code>Document::writeDocument()</code> all changed into <code>write()</code></li> <li><code>Writer\\Word2007\\Part\\DocProps</code>: Split into <code>Writer\\Word2007\\Part\\DocPropsCore</code> and <code>Writer\\Word2007\\Part\\DocPropsApp</code></li> <li><code>Element\\Title::getBookmarkId()</code> replaced by <code>Element\\Title::getRelationId()</code></li> <li><code>Writer\\HTML::writeDocument</code>: Replaced by <code>Writer\\HTML::getContent</code></li> </ul>"},{"location":"changes/0.x/0.11.0.html#miscellaneous","title":"Miscellaneous","text":"<ul> <li>License: Change the project license from LGPL 2.1 into LGPL 3.0 - #211</li> <li>Word2007 Writer: New <code>Style\\Image</code> class - @ivanlanin</li> <li>Refactor: Replace static classes <code>Footnotes</code>, <code>Endnotes</code>, and <code>TOC</code> with <code>Collections</code> - @ivanlanin #206</li> <li>QA: Reactivate <code>phpcpd</code> and <code>phpmd</code> on Travis - @ivanlanin</li> <li>Refactor: PHPMD recommendation: Change all <code>get...</code> method that returns <code>boolean</code> into <code>is...</code> or <code>has...</code> - @ivanlanin</li> <li>Docs: Create gh-pages branch for API documentation - @Progi1984 #154</li> <li>QA: Add <code>.scrutinizer.yml</code> and include <code>composer.lock</code> for preparation to Scrutinizer - @ivanlanin #186</li> <li>Writer: Refactor writer parts using composite pattern - @ivanlanin</li> <li>Docs: Show code quality and test code coverage badge on README</li> <li>Style: Change behaviour of <code>set...</code> function of boolean properties; when none is defined, assumed true - @ivanlanin</li> <li>Shared: Unify PHP ZipArchive and PCLZip features into PhpWord ZipArchive - @ivanlanin</li> <li>Docs: Create VERSION file - @ivanlanin</li> <li>QA: Improve dan update requirement check in <code>samples</code> folder - @ivanlanin</li> </ul>"},{"location":"changes/0.x/0.11.1.html","title":"0.11.1 (2 June 2014)","text":"<p>This is an immediate bugfix release for HTML reader.</p> <ul> <li>HTML Reader: <code>&lt;p&gt;</code> and header tags puts no output - @canyildiz @ivanlanin #257</li> </ul>"},{"location":"changes/0.x/0.12.0.html","title":"0.12.0 (3 January 2015)","text":"<p>This release added form fields (textinput, checkbox, and dropdown), drawing shapes (arc, curve, line, polyline, rect, oval), and basic 2D chart (pie, doughnut, bar, line, area, scatter, radar) elements along with some new styles. Basic MsDoc reader is introduced.</p>"},{"location":"changes/0.x/0.12.0.html#features","title":"Features","text":"<ul> <li>Element: Ability to add drawing shapes (arc, curve, line, polyline, rect, oval) using new <code>Shape</code> element - @ivanlanin #123</li> <li>Font: New <code>scale</code>, <code>spacing</code>, and <code>kerning</code> property of font style - @ivanlanin</li> <li>Paragraph:  Added shading to the paragraph style for full width shading - @lrobert #264</li> <li>RTF Writer: Support for sections, margins, and borders - @ivanlanin #249</li> <li>Section: Ability to set paper size, e.g. A4, A3, and Legal - @ivanlanin #249</li> <li>General: New <code>PhpWord::save()</code> method to encapsulate <code>IOFactory</code> - @ivanlanin</li> <li>General: New <code>Shared\\Converter</code> static class - @ivanlanin</li> <li>Chart: Basic 2D chart (pie, doughnut, bar, line, area, scatter, radar) - @ivanlanin #278</li> <li>Chart: 3D charts and ability to set width and height - @ivanlanin</li> <li>FormField: Ability to add textinput, checkbox, and dropdown form elements - @ivanlanin #266</li> <li>Setting: Ability to define document protection (readOnly, comments, trackedChanges, forms) - @ivanlanin</li> <li>Setting: Ability to remove [Compatibility Mode] text in the MS Word title bar - @ivanlanin</li> <li>SDT: Ability to add structured document tag elements (comboBox, dropDownList, date) - @ivanlanin</li> <li>Paragraph: Support for paragraph with borders - @ivanlanin #294</li> <li>Word2007 Writer : Support for RTL - @Progi1984 #331</li> <li>MsDOC Reader: Basic MsDOC Reader - @Progi1984 #23, #287</li> <li>\"absolute\" horizontal and vertical positioning of Frame - @basjan #302</li> <li>Add new-page function for PDF generation. For multiple PDF-backends - @chc88 #426</li> <li>Report style options enumerated when style unknown - @h6w</li> </ul>"},{"location":"changes/0.x/0.12.0.html#bugfixes","title":"Bugfixes","text":"<ul> <li>Fix rare PclZip/realpath/PHP version problem - @andrew-kzoo #261</li> <li><code>addHTML</code> encoding and ampersand fixes for PHP 5.3 - @bskrtich #270</li> <li>Page breaks on titles and tables - @ivanlanin #274</li> <li>Table inside vertical border does not rendered properly - @ivanlanin #280</li> <li><code>add&lt;elementName&gt;</code> of container should be case insensitive, e.g. <code>addToc</code> should be accepted, not only <code>addTOC</code> - @ivanlanin #294</li> <li>Fix specific borders (and margins) were not written correctly in word2007 writer - @pscheit #327</li> <li>\"HTML is not a valid writer\" exception while running \"Sample_36_RTL.php\" - @RomanSyroeshko #340</li> <li>\"addShape()\" magic method in AbstractContainer is mistakenly named as \"addObject()\" - @GMTA #356</li> <li><code>Element\\Section::setPageSizeW()</code> and <code>Element\\Section::setPageSizeH()</code> were mentioned in the docs but not implemented.</li> <li>Special Characters (ampersand) in Title break docx output - @RomanSyroeshko #401</li> <li><code>&lt;th&gt;</code> tag is closed with <code>&lt;/td&gt;</code> tag: - @franzholz #438</li> </ul>"},{"location":"changes/0.x/0.12.0.html#deprecated","title":"Deprecated","text":"<ul> <li><code>Element\\Link::getTarget()</code> replaced by <code>Element\\Link::getSource()</code></li> <li><code>Element\\Section::getSettings()</code> and <code>Element\\Section::setSettings()</code> replaced by <code>Element\\Section::getStyle()</code> and <code>Element\\Section::setStyle()</code></li> <li><code>Shared\\Drawing</code> and <code>Shared\\Font</code> merged into <code>Shared\\Converter</code></li> <li><code>DocumentProperties</code> replaced by <code>Metadata\\DocInfo</code></li> <li><code>Template</code> replaced by <code>TemplateProcessor</code></li> <li><code>PhpWord-&gt;loadTemplate($filename)</code></li> </ul>"},{"location":"changes/0.x/0.12.0.html#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Docs: Add known issue on <code>README</code> about requirement for temporary folder to be writable and update <code>samples/index.php</code> for this requirement check - @ivanlanin #238</li> <li>Docs: Correct elements.rst about Line - @chrissharkman #292</li> <li>PclZip: Remove temporary file after used - @andrew-kzoo #265</li> <li>Autoloader: Add the ability to set the autoloader options - @bskrtich #267</li> <li>Element: Refactor elements to move set relation Id from container to element - @ivanlanin</li> <li>Introduced CreateTemporaryFileException, CopyFileException - @RomanSyroeshko</li> <li>Settings: added method to set user defined temporary directory - @RomanSyroeshko #310</li> <li>Renamed <code>Template</code> into <code>TemplateProcessor</code> - @RomanSyroeshko #216</li> <li>Reverted #51. All text escaping must be performed out of the library - @RomanSyroeshko #51</li> </ul> <p>v</p>"},{"location":"changes/0.x/0.12.1.html","title":"0.12.1 (30 August 2015)","text":"<p>Maintenance release. This release is focused primarily on <code>TemplateProcessor</code>.</p>"},{"location":"changes/0.x/0.12.1.html#changes","title":"Changes","text":"<ul> <li>Changed visibility of all private properties and methods of <code>TemplateProcessor</code> to <code>protected</code>. - @RomanSyroeshko #498</li> <li>Improved performance of <code>TemplateProcessor::setValue()</code>. - @RomanSyroeshko @nicoSWD #513</li> </ul>"},{"location":"changes/0.x/0.12.1.html#bugfixes","title":"Bugfixes","text":"<ul> <li>Fixed issue with \"Access denied\" message while opening <code>Sample_07_TemplateCloneRow.docx</code> and <code>Sample_23_TemplateBlock.docx</code> result files on Windows platform. - @RomanSyroeshko @AshSat #532</li> <li>Fixed <code>PreserveText</code> element alignment in footer (see <code>Sample_12_HeaderFooter.php</code>). - @RomanSyroeshko @SSchwaiger #495</li> </ul>"},{"location":"changes/0.x/0.13.0.html","title":"0.13.0 (31 July 2016)","text":"<p>This release brings several improvements in <code>TemplateProcessor</code>, automatic output escaping feature for OOXML, ODF, HTML, and RTF (turned off, by default). It also introduces constants for horizontal alignment options, and resolves some issues with PHP 7. Manual installation feature has been dropped since the release. Please, use Composer to install PHPWord.</p>"},{"location":"changes/0.x/0.13.0.html#added","title":"Added","text":"<ul> <li>Introduced the <code>\\PhpOffice\\PhpWord\\SimpleType\\Jc</code> simple type. - @RomanSyroeshko</li> <li>Introduced the <code>\\PhpOffice\\PhpWord\\SimpleType\\JcTable</code> simple type. - @RomanSyroeshko</li> <li>Introduced writer for the \"Paragraph Alignment\" element (see <code>\\PhpOffice\\PhpWord\\Writer\\Word2007\\Element\\ParagraphAlignment</code>). - @RomanSyroeshko</li> <li>Introduced writer for the \"Table Alignment\" element (see <code>\\PhpOffice\\PhpWord\\Writer\\Word2007\\Element\\TableAlignment</code>). - @RomanSyroeshko</li> <li>Supported indexed arrays in arguments of <code>TemplateProcessor::setValue()</code>. - @RomanSyroeshko #618</li> <li>Introduced automatic output escaping for OOXML, ODF, HTML, and RTF. To turn the feature on use <code>phpword.ini</code> or <code>\\PhpOffice\\PhpWord\\Settings</code>. - @RomanSyroeshko #483</li> <li>Supported processing of headers and footers in <code>TemplateProcessor::applyXslStyleSheet()</code>. - @RomanSyroeshko #335</li> </ul>"},{"location":"changes/0.x/0.13.0.html#changed","title":"Changed","text":"<ul> <li>Improved error message for the case when <code>autoload.php</code> is not found. - @RomanSyroeshko #371</li> <li>Renamed the <code>align</code> option of <code>NumberingLevel</code>, <code>Frame</code>, <code>Table</code>, and <code>Paragraph</code> styles into <code>alignment</code>. - @RomanSyroeshko</li> <li>Improved performance of <code>TemplateProcessor::setValue()</code>. - @kazitanvirahsan #614, #617</li> <li>Fixed some HTML tags not rendering any output (p, header &amp; table) - #257, #324 - @twmobius and @garethellis</li> </ul>"},{"location":"changes/0.x/0.13.0.html#deprecated","title":"Deprecated","text":"<ul> <li><code>getAlign</code> and <code>setAlign</code> methods of <code>NumberingLevel</code>, <code>Frame</code>, <code>Table</code>, and <code>Paragraph</code> styles. Use the correspondent <code>getAlignment</code> and <code>setAlignment</code> methods instead. - @RomanSyroeshko</li> <li><code>left</code>, <code>right</code>, and <code>justify</code> alignment options for paragraphs (now are mapped to <code>Jc::START</code>, <code>Jc::END</code>, and <code>Jc::BOTH</code>). - @RomanSyroeshko</li> <li><code>left</code>, <code>right</code>, and <code>justify</code> alignment options for tables (now are mapped to <code>Jc::START</code>, <code>Jc::END</code>, and <code>Jc::CENTER</code>). - @RomanSyroeshko</li> <li><code>TCPDF</code> due to its limited HTML support. Use <code>DomPDF</code> or <code>MPDF</code> writer instead. - @RomanSyroeshko #399</li> </ul>"},{"location":"changes/0.x/0.13.0.html#removed","title":"Removed","text":"<ul> <li><code>\\PhpOffice\\PhpWord\\Style\\Alignment</code>. Style properties, which previously stored instances of this class, now deal with strings. In each case set of available string values is defined by the correspondent simple type. - @RomanSyroeshko</li> <li>Manual installation support. Since the release we have dependencies on third party libraries, so installation via ZIP-archive download is not an option anymore. To install PHPWord use Composer.  We also removed <code>\\PhpOffice\\PhpWord\\Autoloader</code>, because the latter change made it completely useless.  Autoloaders provided by Composer are in use now (see <code>bootstrap.php</code>). - @RomanSyroeshko</li> <li><code>\\PhpOffice\\PhpWord\\Shared\\Drawing</code> replaced by <code>\\PhpOffice\\Common\\Drawing</code>. - @Progi1984 #658</li> <li><code>\\PhpOffice\\PhpWord\\Shared\\Font</code>. - @Progi1984 #658</li> <li><code>\\PhpOffice\\PhpWord\\Shared\\String</code> replaced by <code>\\PhpOffice\\Common\\Text</code>. - @Progi1984 @RomanSyroeshko #658</li> <li><code>\\PhpOffice\\PhpWord\\Shared\\XMLReader</code> replaced by <code>\\PhpOffice\\Common\\XMLReader</code>. - @Progi1984 #658</li> <li><code>\\PhpOffice\\PhpWord\\Shared\\XMLWriter</code> replaced by <code>\\PhpOffice\\Common\\XMLWriter</code>. - @Progi1984 @RomanSyroeshko #658</li> <li><code>AbstractContainer::addMemoryImage()</code>. Use <code>AbstractContainer::addImage()</code> instead.</li> </ul>"},{"location":"changes/0.x/0.13.0.html#fixed","title":"Fixed","text":"<ul> <li><code>Undefined property</code> error while reading MS-DOC documents. - @jaberu #610</li> <li>Corrupted OOXML template issue in case when its names is broken immediately after <code>$</code> sign. That case wasn't taken into account in implementation of <code>TemplateProcessor::fixBrokenMacros()</code>. - @RomanSyroeshko @d-damien #548</li> </ul>"},{"location":"changes/0.x/0.14.0.html","title":"0.14.0 (29 Dec 2017)","text":"<p>This release fixes several bugs and adds some new features. This version brings compatibility with PHP 7.0 &amp; 7.1</p>"},{"location":"changes/0.x/0.14.0.html#added","title":"Added","text":"<ul> <li>Possibility to control the footnote numbering -by @troosan in #1068</li> <li>Image creation from string -by @troosan in #937</li> <li>Introduced the <code>\\PhpOffice\\PhpWord\\SimpleType\\NumberFormat</code> simple type. - @troosan</li> <li>Support for ContextualSpacing -by @postHawk in #1088</li> <li>Possiblity to hide spelling and/or grammatical errors -by @troosan in #542</li> <li>Possiblity to set default document language as well as changing the language for each text element -by @troosan in #1108</li> <li>Support for Comments -by @troosan in #1067</li> <li>Support for paragraph textAlignment -by @troosan in #1165</li> <li>Add support for HTML underline tag <code>&lt;u&gt;</code> in addHtml -by @zNightFalLz in #1186</li> <li>Add support for HTML <code>&lt;br&gt;</code> in addHtml - @anrikunby @troosan in #659</li> <li>Allow to change cell width unit - guillaume-ro-fr #986</li> <li>Allow to change the line height rule @troosan</li> <li>Implement PageBreak for odt writerby @cookiekiller in #863 #824</li> <li>Allow to force an update of all fields on opening a document -by @troosan in #951</li> <li>Allow adding a CheckBox in a TextRun -by @irond in #727</li> <li>Add support for HTML img tag -by @srggroup in #934</li> <li>Add support for password protection for docx -by @mariahaubner in #1019</li> </ul>"},{"location":"changes/0.x/0.14.0.html#fixed","title":"Fixed","text":"<ul> <li>Loosen dependency to Zend</li> <li>Images are not being printed when generating PDF -by @hubertinio in #1074 #431</li> <li>Fixed some PHP 7 warnings - @ likeuntomurphy #927</li> <li>Fixed PHP 7.2 compatibility (renamed <code>Object</code> class names to <code>ObjectElement</code>) -by @SailorMax in #1185</li> <li>Fixed Word 97 reader - @alsofronie @Benpxpxby @mario-rivera in #912 #920 #892</li> <li>Fixed image loading over https -by @troosan in #988</li> <li>Impossibility to set different even and odd page headers -by @troosan in #981</li> <li>Fixed Word2007 reader where unnecessary paragraphs were being created -by @donghaobo in #1043 #620</li> <li>Fixed Word2007 reader where margins were not being read correctly -by @slowprog in #885 #1008</li> <li>Impossible to add element PreserveText in Section -by @rvanlaak in #452</li> <li>Added missing options for numbering format -by @troosan in #1041</li> <li>Fixed impossibility to set a different footer for first page -by @ctrlaltca in #1116,by @aoloe in #875</li> <li>Fixed styles not being applied by HTML writer, better pdf output -by @sarke in #1047 #500 #1139</li> <li>Fixed read docx error when document contains image from remote url -by @FBnil in #1173 #1176</li> <li>Padded the $args array to remove error -by @kaigoh in #1150,by @reformed in #870</li> <li>Fix incorrect image size between windows and mac -by @bskrtich in #874</li> <li>Fix adding HTML table to document - @mogilvieby @arivanbastos in #324</li> <li>Fix parsing on/off values (w:val=\"true|false|1|0|on|off\") -by @troosan in #1221 #1219</li> <li>Fix error on Empty Dropdown Entry -by @ComputerTinker in #592</li> </ul>"},{"location":"changes/0.x/0.14.0.html#deprecated","title":"Deprecated","text":"<ul> <li>PhpWord-&gt;getProtection(), get it from the settings instead PhpWord-&gt;getSettings()-&gt;getDocumentProtection();</li> </ul>"},{"location":"changes/0.x/0.15.0.html","title":"0.15.0 (14 Jul 2018)","text":""},{"location":"changes/0.x/0.15.0.html#added","title":"Added","text":"<ul> <li>Parsing of <code>align</code> HTML attribute -by @troosan in #1231</li> <li>Parse formatting inside HTML lists - @troosanby @samimussbach in #1239 / #945 / #1215 / #508</li> <li>Parsing of CSS <code>direction</code> instruction, HTML <code>lang</code> attribute, formatting inside table cell -by @troosan in #1273 / #1252 / #1254</li> <li>Add support for Track changes @Cipby @troosan in #354 / #1262</li> <li>Add support for fixed Table Layout @aoloe @ekopachby @troosan in #841 / #1276</li> <li>Add support for Cell Spacing @dox07by @troosan in #1040</li> <li>Add parsing of formatting inside lists @atomicalnetby @troosan in #594</li> <li>Added support for Vertically Raised or Lowered Text (w:position) @anrikunby @troosan in #640</li> <li>Add support for MACROBUTTON field @phryneasby @troosan in #1021</li> <li>Add support for Hyphenationby @Trainmaster in #1282 (Document: <code>autoHyphenation</code>, <code>consecutiveHyphenLimit</code>, <code>hyphenationZone</code>, <code>doNotHyphenateCaps</code>, Paragraph: <code>suppressAutoHyphens</code>)</li> <li>Added support for Floating Table Positioning (tblpPr)by @anrikun in #639</li> <li>Added support for Image text wrapping distanceby @troosan in #1310</li> <li>Added parsing of CSS line-height and text-indent in HTML readerby @troosan in #1316</li> <li>Added the ability to enable gridlines and axislabels on chartsby @FrankMeyer in #576</li> <li>Add support for table indent (tblInd)by @Trainmaster in #1343</li> <li>Added parsing of internal links in HTML readerby @lalop in #1336</li> <li>Several improvements to chartsby @JAEK-S in #1332</li> <li>Add parsing of html image in base64 formatby @jgpATs2w in #1382</li> <li>Added Support for Indentation &amp; Tabs on RTF Writer.by @smaug1985 in #1405</li> <li>Allows decimal numbers in HTML line-height styleby @jgpATs2w in #1413</li> </ul>"},{"location":"changes/0.x/0.15.0.html#fixed","title":"Fixed","text":"<ul> <li>Fix reading of docx default style -by @troosan in #1238</li> <li>Fix the size unit of when parsing html images -by @troosan in #1254</li> <li>Fixed HTML parsing of nested lists -by @troosan in #1265</li> <li>Save PNG alpha information when using remote images.by @samsullivan in #779</li> <li>Fix parsing of <code>&lt;w:br/&gt;</code> tag.by @troosan in #1274</li> <li>Bookmark are not writton as internal link in html writerby @troosan in #1263</li> <li>It should be possible to add a Footnote in a ListItemRunby @troosan in #1287 #1287</li> <li>Fix colspan and rowspan for tables in HTML Writerby @mattbolt in #1292</li> <li>Fix parsing of Heading and Title formating @troosanby @gthomas2 in #465</li> <li>Fix Dateformat typo, fix hours casing, add Month-Day-Year formatsby @ComputerTinker in #591</li> <li>Support reading of w:drawing for documents produced by word 2011+by @gthomas2 in #464 #1324</li> <li>Fix missing column width in ODText writerby @potofcoffee in #413</li> <li>Disable entity loader before parsing XML to avoid XXE injectionby @Tom4t0 in #1427</li> </ul>"},{"location":"changes/0.x/0.15.0.html#changed","title":"Changed","text":"<ul> <li>Remove zend-stdlib dependencyby @Trainmaster in #1284</li> <li>The default unit for <code>\\PhpOffice\\PhpWord\\Style\\Image</code> changed from <code>px</code> to <code>pt</code>.</li> </ul>"},{"location":"changes/0.x/0.15.0.html#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Drop GitHub pages, switch to coveralls for code coverage analysisby @czosel in #1360</li> </ul>"},{"location":"changes/0.x/0.16.0.html","title":"0.16.0 (30 dec 2018)","text":""},{"location":"changes/0.x/0.16.0.html#added","title":"Added","text":"<ul> <li>Add getVariableCount method in TemplateProcessor.by @nicoder in #1272</li> <li>Add setting Chart Title and Legend visibilityby @Tom-Magill in #1433</li> <li>Add ability to pass a Style object in Section constructorby @ndench in #1416</li> <li>Add support for hidden textby @Alexmg86 in #1527</li> <li>Add support for setting images in TemplateProcessorby @SailorMax in #1170</li> <li>Add \"Plain Text\" type to SDT (Structured Document Tags)by @morrisdj in #1541</li> <li>Added possibility to index variables inside cloned block in TemplateProcessorby @JPBetley in #817</li> <li>Added possibility to replace variables inside cloned block with values in TemplateProcessorby @DIDoS in #1392</li> </ul>"},{"location":"changes/0.x/0.16.0.html#fixed","title":"Fixed","text":"<ul> <li>Fix regex in <code>cloneBlock</code> functionby @nicoder in #1269</li> <li>HTML Title Writer loses text when Title contains a TextRun instead a string.by @begnini in #1436</li> <li>Fix regex in fixBrokenMacros, make it less greedy @MuriloSo @brainwoodby @yurii-sio2 in #1502 / #1345</li> <li>240 twips are being added to line spacing, should not happen when using lineRule fixedby @troosan in #1509 / #1505</li> <li>Adding table layout to the generated HTMLby @aarangara in #1441</li> <li>Fix loading of Sharepoint documentby @Garrcomm in #1498</li> <li>RTF writer: Round getPageSizeW and getPageSizeH to avoid decimalsby @Patrick64 in #1493</li> <li>Fix parsing of Office 365 documentsby @Timanx in #1485</li> <li>For RTF writers, sizes should should never have decimalsby @Samuel-BF in #1536</li> <li>Style Name Parsing fails if document generated by a non-english word versionby @begnini in #1434</li> </ul>"},{"location":"changes/0.x/0.16.0.html#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Get rid of duplicated code in TemplateProcessorby @abcdmitry in #1161</li> </ul>"},{"location":"changes/0.x/0.17.0.html","title":"0.17.0 (01 oct 2019)","text":""},{"location":"changes/0.x/0.17.0.html#added","title":"Added","text":"<ul> <li>Add methods setValuesFromArray and cloneRowFromArray to the TemplateProcessor @geraldb-nicat GH-670</li> <li>Set complex type in template @troosan GH-1565</li> <li>implement support for section vAlign @troosan GH-1569</li> <li>ParseStyle for border-color @Gllrm0 GH-1551</li> <li>Html writer auto invert text color @SailorMax GH-1387</li> <li>Add RightToLeft table presentation. @troosan GH-1550</li> <li>Add support for page vertical alignment. @troosan GH-672 GH-1569</li> <li>Adding setNumId method for ListItem style @eweso GH-1329</li> <li>Add support for basic fields in RTF writer. @Samuel-BF GH-1717</li> </ul>"},{"location":"changes/0.x/0.17.0.html#fixed","title":"Fixed","text":"<ul> <li>Fix HTML border-color parsing. @troosan GH-1551 / GH-1570</li> <li>Language::validateLocale should pass with locale 'zxx'. @efpapado GH-1558</li> <li>can't align center vertically with the text @ter987 GH-672</li> <li>fix parsing of border-color and add test @troosan GH-1570</li> <li>TrackChange doesn't handle all return types of \\DateTime::createFromFormat(...) @superhaggis GH-1584</li> <li>To support PreserveText inside sub container @bhattnishant GH-1637</li> <li>No nested w:pPr elements in ListItemRun. @waltertamboer GH-1628</li> <li>Ensure that entity_loader disable variable is re-set back to the original setting @seamuslee001 GH-1585</li> </ul>"},{"location":"changes/0.x/0.17.0.html#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Use embedded http server to test loading of remote images @troosan GH-1544</li> <li>Change private to protected to be able extending class Html @SpinyMan GH-1646</li> <li>Fix apt-get crash in Travis CI for PHP 5.3 @mdupont GH-1707</li> </ul>"},{"location":"changes/0.x/0.18.0.html","title":"0.18.0 (2021-02-12)","text":"<p>Full Changelog</p>"},{"location":"changes/0.x/0.18.0.html#enhancements","title":"Enhancements","text":"<ul> <li>Add support for charts in template processor #2012 (@dbarzin)</li> <li>add/setting page element border style. #1986 (@emnabs)</li> <li>allow to use customized pdf library #1983 (@SailorMax)</li> <li>feat: Update addHtml to handle style inheritance #1965 (@Julien1138)</li> <li>Add parsing of Shape node values #1924 (@sven-ahrens)</li> <li>Allow to redefine TCPDF object #1907 (@SailorMax)</li> <li>Enhancements to addHTML parser #1902 (@lubosdz)</li> <li>Make Default Paper Configurable #1851 (@oleibman)</li> <li>Implement various missing features for the ODT writer #1796 (@oleibman)</li> <li>Added support for \"cloudConvert\" images #1794 (@ErnestStaug)</li> <li>Add support for several features for the RTF writer #1775 (@oleibman)</li> <li>Add font style for Field elements #1774 (@oleibman)</li> <li>Add support for ListItemRun in HTML writer #1766 (@stefan-91)</li> <li>Improvements in RTF writer #1755 (@oleibman)</li> <li>Allow a closure to be passed with image replacement tags #1716 (@mbardelmeijer)</li> <li>Add Option for Dynamic Chart Legend Position #1699 (@Stephan212)</li> <li>Add parsing of HTML checkbox input field #1832 (@Matze2010)</li> </ul>"},{"location":"changes/0.x/0.18.0.html#bug-fixes","title":"Bug fixes","text":"<ul> <li>Fix image stroke in libreoffice 7.x #1992 (@Adizbek)</li> <li>Fix deprecated warning for non-hexadecimal number #1988 (@Ciki)</li> <li>Fix limit not taken into account when adding image in template #1967 (@jsochor)</li> <li>Add null check when setComplexValue is not found #1936 (@YannikFirre)</li> <li>Some document have non-standard locale code #1824 (@ErnestStaug)</li> <li>Fixes PHPDoc @param and @return types for several Converter methods #1818 (@caugner)</li> <li>Update the regexp to avoid catastrophic backtracking #1809 (@juzser)</li> <li>Fix PHPUnit tests on develop branch #1771 (@mdupont)</li> <li>TemplateProcessor cloneBlock wrongly clones images #1763 (@alarai)</li> </ul>"},{"location":"changes/0.x/0.18.0.html#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Compatibility with PHP 7.4, PHP 8.0 and migrate to Laminas Escaper #1946 (@liborm85)</li> <li>Remove legacy PHPOffice/Common package, fix PHP 8.0 compatibility #1996 (@liborm85)</li> <li>Improve Word2007 Test Coverage #1858 (@oleibman)</li> <li>Fix typo in docs. Update templates-processing.rst #1952 (@mnvx)</li> <li>Fix documentation and method name for FootnoteProperties #1776 (@mdupont)</li> <li>fix: documentation about paragraph indentation #1764 (@mdupont)</li> <li>Update templates-processing.rst #1745 (@igronus)</li> <li>Unused variables $rows, $cols in sample #1877 (@ThanasisMpalatsoukas)</li> <li>Add unit test for NumberingStyle #1744 (@Manunchik)</li> <li>Add unit test for PhpWord Settings #1743 (@Manunchik)</li> <li>Add unit test for Media elements #1742 (@Manunchik)</li> <li>Update templates processing docs #1729 (@hcdias)</li> </ul>"},{"location":"changes/0.x/0.18.1.html","title":"0.18.1 (2021-03-08)","text":"<p>Full Changelog</p>"},{"location":"changes/0.x/0.18.1.html#bug-fixes","title":"Bug fixes","text":"<ul> <li>Fix BC break in GH-1946.      This package does not replace laminas/laminas-zendframework-bridge by @mussbach in #2032</li> </ul>"},{"location":"changes/0.x/0.18.2.html","title":"0.18.2 (2021-06-04)","text":"<p>Full Changelog</p>"},{"location":"changes/0.x/0.18.2.html#bug-fixes","title":"Bug fixes","text":"<ul> <li>when adding image to relationship first check that the generated RID is actually unique by @tpv-ebben in #2063</li> <li>Update chart, don't write 'c:overlap' if grouping is 'clustered' by @dfsd534 in #2052</li> <li>Update Html parser to accept line-height:normal by @joelgo in #2041</li> <li>Fix image border in Word2007 Writer for LibreOffice 7 by k@amilmmach in #2021</li> </ul>"},{"location":"changes/0.x/0.18.2.html#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Corrected namespace for Language class in docs by @MegaChriz in #2087</li> <li>Added support for Garamond font by @artemkolotilkin in #2078</li> <li>Add BorderStyle for Cell Style to documentation by @DShkrabak in #2090</li> </ul>"},{"location":"changes/0.x/0.18.3.html","title":"0.18.3 (2022-02-17)","text":"<p>Full Changelog</p>"},{"location":"changes/0.x/0.18.3.html#bug-fixes","title":"Bug fixes","text":"<ul> <li>PHP 8.1 compatibility</li> </ul>"},{"location":"changes/0.x/0.7.0.html","title":"0.7.0 (28 Jan 2014)","text":"<p>This is the first release after a long development hiatus in CodePlex. This release initialized ODT and RTF Writer, along with some other new features for the existing Word2007 Writer, e.g. tab, multiple header, rowspan and colspan. Composer and Travis were added.</p>"},{"location":"changes/0.x/0.7.0.html#features","title":"Features","text":"<ul> <li>Implement RTF Writer - @Progi1984 #1</li> <li>Implement ODT Writer - @Progi1984 #2</li> <li>Word2007: Add rowspan and colspan to cells - @kaystrobach</li> <li>Word2007: Support for tab stops - @RLovelett</li> <li>Word2007: Support Multiple headers - @RLovelett</li> <li>Word2007: Wrapping Styles to Images - @gabrielbull</li> <li>Added support for image wrapping style - @gabrielbull</li> </ul>"},{"location":"changes/0.x/0.7.0.html#bugfixes","title":"Bugfixes","text":"<ul> <li>\"Warning: Invalid error type specified in ...\\PHPWord.php on line 226\" is thrown when the specified template file is not found - @RomanSyroeshko #32</li> <li>PHPWord_Shared_String.IsUTF8 returns FALSE for Cyrillic UTF-8 input - @RomanSyroeshko #34</li> <li>Temporary files naming logic in PHPWord_Template can lead to a collision - @RomanSyroeshko #38</li> </ul>"},{"location":"changes/0.x/0.7.0.html#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Add superscript/subscript styling in Excel2007 Writer - @MarkBaker</li> <li>add indentation support to paragraphs - @deds</li> <li>Support for Composer - @Progi1984 #27</li> <li>Basic CI with Travis - @Progi1984</li> <li>Added PHPWord_Exception and exception when could not copy the template - @Progi1984</li> <li>IMPROVED: Moved examples out of Classes directory - @Progi1984</li> <li>IMPROVED: Advanced string replace in setValue for Template - @Esmeraldo #49</li> </ul>"},{"location":"changes/0.x/0.8.0.html","title":"0.8.0 (15 Mar 2014)","text":"<p>This release merged a lot of improvements from the community. Unit tests introduced in this release and has reached 90% code coverage.</p>"},{"location":"changes/0.x/0.8.0.html#features","title":"Features","text":"<ul> <li>Template: Permit to save a template generated as a file (PHPWord_Template::saveAs()) - @RomanSyroeshko #56, #57</li> <li>Word2007: Support sections page numbering - @gabrielbull</li> <li>Word2007: Added line height methods to mirror the line height settings in Word in the paragraph styling - @gabrielbull</li> <li>Word2007: Added support for page header &amp; page footer height - @JillElaine #5</li> <li>General: Add ability to manage line breaks after image insertion - @bskrtich #6, #66, #84</li> <li>Template: Ability to limit number of replacements performed by setValue() method of Template class - @RomanSyroeshko #52, #53, #85</li> <li>Table row: Repeat as header row &amp; allow row to break across pages - @ivanlanin #48, #86</li> <li>Table: Table width in percentage - @ivanlanin #48, #86</li> <li>Font: Superscript and subscript - @ivanlanin #48, #86</li> <li>Paragraph: Hanging paragraph - @ivanlanin #48, #86</li> <li>Section: Multicolumn and section break - @ivanlanin #48, #86</li> <li>Template: Ability to apply XSL style sheet to Template - @RomanSyroeshko #46, #47, #83</li> <li>General: PHPWord_Shared_Font::pointSizeToTwips() converter - @ivanlanin #87</li> <li>Paragraph: Ability to define normal paragraph style with PHPWord::setNormalStyle() - @ivanlanin #87</li> <li>Paragraph: Ability to define parent style (basedOn) and style for following paragraph (next) - @ivanlanin #87</li> <li>Clone table rows on the fly when using a template document - @jeroenmoors #44, #88</li> <li>Initial addition of basic footnote support - @deds #16</li> <li>Paragraph: Ability to define paragraph pagination: widow control, keep next, keep lines, and page break before - @ivanlanin #92</li> <li>General: PHPWord_Style_Font refactoring - @ivanlanin #93</li> <li>Font: Use points instead of halfpoints internally. Conversion to halfpoints done during XML Writing. - @ivanlanin #93</li> <li>Paragraph: setTabs() function - @ivanlanin #92</li> <li>General: Basic support for TextRun on ODT and RTF - @ivanlanin #99</li> <li>Reader: Basic Reader for Word2007 - @ivanlanin #104</li> <li>TextRun: Allow Text Break in Text Run - @bskrtich  #109</li> <li>General: Support for East Asian fontstyle - @jhfangying #111, #118</li> <li>Image: Use exif_imagetype to check image format instead of extension name - @gabrielbull #114</li> <li>General: Setting for XMLWriter Compatibility option - @bskrtich  #103</li> <li>MemoryImage: Allow remote image when allow_url_open = on - @ivanlanin #122</li> <li>TextBreak: Allow font and paragraph style for text break - @ivanlanin #18</li> </ul>"},{"location":"changes/0.x/0.8.0.html#bugfixes","title":"Bugfixes","text":"<ul> <li>Fixed bug with cell styling - @gabrielbull</li> <li>Fixed bug list items inside of cells - @gabrielbull</li> <li>Adding a value that contains \"&amp;\" in a template breaks it - @SiebelsTim #51</li> <li>Example in README.md is broken - @Progi1984 #89</li> <li>General: PHPWord_Shared_Drawing::centimetersToPixels() conversion - @ivanlanin #94</li> <li>Footnote: Corrupt DOCX reported by MS Word when sections &gt; 1 and not every sections have footnote - @ivanlanin #125</li> </ul>"},{"location":"changes/0.x/0.8.0.html#miscellaneous","title":"Miscellaneous","text":"<ul> <li>UnitTests - @Progi1984</li> </ul>"},{"location":"changes/0.x/0.8.1.html","title":"0.8.1 (17 Mar 2014)","text":"<p>This is a bugfix release for image detection functionality.</p> <ul> <li>Added fallback for computers that do not have exif_imagetype - @bskrtich, @gabrielbull</li> </ul>"},{"location":"changes/0.x/0.9.0.html","title":"0.9.0 (26 Mar 2014)","text":"<p>This release marked the transformation to namespaces (PHP 5.3+).</p>"},{"location":"changes/0.x/0.9.0.html#features","title":"Features","text":"<ul> <li>Image: Ability to use remote or GD images using <code>addImage()</code> on sections, headers, footer, cells, and textruns - @ivanlanin</li> <li>Header: Ability to use remote or GD images using <code>addWatermark()</code> - @ivanlanin</li> </ul>"},{"location":"changes/0.x/0.9.0.html#bugfixes","title":"Bugfixes","text":"<ul> <li>Preserve text doesn't render correctly when the text is not the first word, e.g. 'Page {PAGE}' - @ivanlanin</li> </ul>"},{"location":"changes/0.x/0.9.0.html#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Move documentation to Read The Docs - by @Progi1984 &amp; @ivanlanin in #82</li> <li>Reorganize and redesign samples folder - @ivanlanin #137</li> <li>Use <code>PhpOffice\\PhpWord</code> namespace for PSR compliance - @RomanSyroeshko @gabrielbull #159, #58</li> <li>Restructure folders and change folder name <code>Classes</code> to <code>src</code> and <code>Tests</code> to <code>test</code> for PSR compliance - @RomanSyroeshko @gabrielbull</li> <li>Compliance to phpDocumentor - @ivanlanin</li> <li>Merge Style\\TableFull into Style\\Table. Style\\TableFull is deprecated - @ivanlanin #160</li> <li>Merge Section\\MemoryImage into Section\\Image. Section\\Image is deprecated - @ivanlanin #160</li> </ul>"},{"location":"changes/0.x/0.9.1.html","title":"0.9.1 (27 Mar 2014)","text":"<p>This is a bugfix release for PSR-4 compatibility.</p> <ul> <li>Fixed PSR-4 composer autoloader - @AntonTyutin</li> </ul>"},{"location":"changes/1.x/1.0.0.html","title":"1.0.0 (2022-11-15)","text":"<p>Full Changelog</p>"},{"location":"changes/1.x/1.0.0.html#breaking-change","title":"BREAKING CHANGE","text":"<p>Most deprecated things were dropped. See details in  https://github.com/PHPOffice/PHPWord/commit/b9f1151bc6f90c276153c3c9dca10a5fc7f355fb.</p>"},{"location":"changes/1.x/1.0.0.html#dropped-classes","title":"Dropped classes:","text":"<ul> <li><code>PhpOffice\\PhpWord\\Template</code></li> </ul>"},{"location":"changes/1.x/1.0.0.html#dropped-constants","title":"Dropped constants:","text":"<ul> <li><code>PhpOffice\\PhpWord\\Style\\Font::UNDERLINE_DOTHASH</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Font::UNDERLINE_DOTHASHHEAVY</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Cell::VALIGN_TOP</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Cell::VALIGN_CENTER</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Cell::VALIGN_BOTTOM</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Cell::VALIGN_BOTH</code></li> <li><code>PhpOffice\\PhpWord\\Style\\TOC::TABLEADER_DOT</code></li> <li><code>PhpOffice\\PhpWord\\Style\\TOC::TABLEADER_UNDERSCORE</code></li> <li><code>PhpOffice\\PhpWord\\Style\\TOC::TABLEADER_LINE</code></li> <li><code>PhpOffice\\PhpWord\\Style\\TOC::TABLEADER_NONE</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Table::WIDTH_AUTO</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Table::WIDTH_PERCENT</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Table::WIDTH_TWIP</code></li> <li><code>PhpOffice\\PhpWord\\PhpWord::DEFAULT_FONT_NAME</code></li> <li><code>PhpOffice\\PhpWord\\PhpWord::DEFAULT_FONT_SIZE</code></li> <li><code>PhpOffice\\PhpWord\\PhpWord::DEFAULT_FONT_COLOR</code></li> <li><code>PhpOffice\\PhpWord\\PhpWord::DEFAULT_FONT_CONTENT_TYPE</code></li> <li></li> </ul>"},{"location":"changes/1.x/1.0.0.html#dropped-methods","title":"Dropped methods:","text":"<ul> <li><code>PhpOffice\\PhpWord\\Ekement\\AbstractContainer::createTextRun()</code></li> <li><code>PhpOffice\\PhpWord\\Ekement\\AbstractContainer::createFootnote()</code></li> <li><code>PhpOffice\\PhpWord\\Ekement\\Footnote::getReferenceId()</code></li> <li><code>PhpOffice\\PhpWord\\Ekement\\Footnote::setReferenceId()</code></li> <li><code>PhpOffice\\PhpWord\\Ekement\\Image::getIsWatermark()</code></li> <li><code>PhpOffice\\PhpWord\\Ekement\\Image::getIsMemImage()</code></li> <li><code>PhpOffice\\PhpWord\\Ekement\\Link::getTarget()</code></li> <li><code>PhpOffice\\PhpWord\\Ekement\\Link::getLinkSrc()</code></li> <li><code>PhpOffice\\PhpWord\\Ekement\\Link::getLinkName()</code></li> <li><code>PhpOffice\\PhpWord\\Ekement\\OLEObject::getObjectId()</code></li> <li><code>PhpOffice\\PhpWord\\Ekement\\OLEObject::setObjectId()</code></li> <li><code>PhpOffice\\PhpWord\\Ekement\\Section::getFootnotePropoperties()</code></li> <li><code>PhpOffice\\PhpWord\\Ekement\\Section::setSettings()</code></li> <li><code>PhpOffice\\PhpWord\\Ekement\\Section::getSettings()</code></li> <li><code>PhpOffice\\PhpWord\\Ekement\\Section::createHeader()</code></li> <li><code>PhpOffice\\PhpWord\\Ekement\\Section::createFooter()</code></li> <li><code>PhpOffice\\PhpWord\\Ekement\\Section::getFooter()</code></li> <li><code>PhpOffice\\PhpWord\\Media::addSectionMediaElement()</code></li> <li><code>PhpOffice\\PhpWord\\Media::addSectionLinkElement()</code></li> <li><code>PhpOffice\\PhpWord\\Media::getSectionMediaElements()</code></li> <li><code>PhpOffice\\PhpWord\\Media::countSectionMediaElements()</code></li> <li><code>PhpOffice\\PhpWord\\Media::addHeaderMediaElement()</code></li> <li><code>PhpOffice\\PhpWord\\Media::countHeaderMediaElements()</code></li> <li><code>PhpOffice\\PhpWord\\Media::getHeaderMediaElements()</code></li> <li><code>PhpOffice\\PhpWord\\Media::addFooterMediaElement()</code></li> <li><code>PhpOffice\\PhpWord\\Media::countFooterMediaElements()</code></li> <li><code>PhpOffice\\PhpWord\\Media::getFooterMediaElements()</code></li> <li><code>PhpOffice\\PhpWord\\PhpWord::getProtection()</code></li> <li><code>PhpOffice\\PhpWord\\PhpWord::loadTemplate()</code></li> <li><code>PhpOffice\\PhpWord\\PhpWord::createSection()</code></li> <li><code>PhpOffice\\PhpWord\\PhpWord::getDocumentProperties()</code></li> <li><code>PhpOffice\\PhpWord\\PhpWord::setDocumentProperties()</code></li> <li><code>PhpOffice\\PhpWord\\Reader\\AbstractReader::getReadDataOnly()</code></li> <li><code>PhpOffice\\PhpWord\\Settings::getCompatibility()</code></li> <li><code>PhpOffice\\PhpWord\\Style\\AbstractStyle::setArrayStyle()</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Cell::getDefaultBorderColor()</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Font::getBold()</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Font::getItalic()</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Font::getSuperScript()</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Font::getSubScript()</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Font::getStrikethrough()</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Font::getParagraphStyle()</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Frame::getAlign()</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Frame::setAlign()</code></li> <li><code>PhpOffice\\PhpWord\\Style\\NumberingLevel::getAlign()</code></li> <li><code>PhpOffice\\PhpWord\\Style\\NumberingLevel::setAlign()</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Paragraph::getAlign()</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Paragraph::setAlign()</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Paragraph::getWidowControl()</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Paragraph::getKeepNext()</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Paragraph::getKeepLines()</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Paragraph::getPageBreakBefore()</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Row::getTblHeader()</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Row::isTblHeader()</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Row::getCantSplit()</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Row::getExactHeight()</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Spacing::getRule()</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Spacing::setRule()</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Table::getAlign()</code></li> <li><code>PhpOffice\\PhpWord\\Style\\Table::setAlign()</code></li> <li><code>PhpOffice\\PhpWord\\Writer\\AbstractWriter::getUseDiskCaching()</code></li> <li><code>PhpOffice\\PhpWord\\Writer\\HTML::writeDocument()</code></li> </ul>"},{"location":"changes/1.x/1.0.0.html#bug-fixes","title":"Bug fixes","text":"<ul> <li>Multiple PHP 8.1 fixes</li> <li><code>loadConfig</code> returns config that was actually applied</li> <li>HTML Reader : Override inline style on HTML attribute for table</li> <li>HTML Reader : Use <code>border</code> attribute for tables</li> <li>HTML Reader : Style page-break-after in paragraph</li> <li>HTML Reader : Heading in Text Run is not allowed</li> </ul>"},{"location":"changes/1.x/1.0.0.html#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Drop support for PHP 7.0 and older</li> </ul>"},{"location":"changes/1.x/1.1.0.html","title":"1.1.0 (2023-05-30)","text":"<p>Full Changelog</p>"},{"location":"changes/1.x/1.1.0.html#enhancements","title":"Enhancements","text":"<ul> <li>Introduce deleteRow() method for TemplateProcessor</li> <li>HTML Reader: Add basic support for CSS Style Tag</li> <li>Allow customizing macro syntax in TemplateProcessor</li> <li>Add background color support for textboxes</li> <li>Add softhyphen support to word reader</li> <li>Add support table row height when importing HTML</li> <li>Add support for fractional font sizes</li> <li>Added image quality support, with the maximum quality as default</li> <li>Support for reading nested tables</li> </ul>"},{"location":"changes/1.x/1.1.0.html#bug-fixes","title":"Bug fixes","text":"<ul> <li>DOCX reader: Read empty vmerge</li> <li>Fixed setting width of Cell Style</li> </ul>"},{"location":"changes/1.x/1.1.0.html#miscellaneous","title":"Miscellaneous","text":"<ul> <li><code>master</code> is the new default branch</li> </ul>"},{"location":"changes/1.x/1.2.0.html","title":"1.2.0","text":"<p>Full Changelog</p>"},{"location":"changes/1.x/1.2.0.html#enhancements","title":"Enhancements","text":"<ul> <li>Word2007 Reader/Writer : Added noWrap table cell property by @kernusr in GH-2359</li> <li>HTML Reader : Support for <code>font-variant: small-caps</code> by @cambraca in GH-2117</li> <li>Improved TextDirection for styling a cell by @terryzwt in GH-2429</li> <li>Word2007 Reader : Added option to disable loading images by @aelliott1485 in GH-2450</li> <li>HTML Writer : Added border-spacing to default styles for table by @kernusr in GH-2451</li> <li>Word2007 Reader : Support for table cell borders and margins by @kernusr in GH-2454</li> <li>PDF Writer : Add config for defining the default font by @MikeMaldini in #2262 &amp; #2468</li> <li>Word2007 Reader : Added support for Comments by @shaedrich in #2161 &amp; #2469</li> <li>Word2007 Reader/Writer: Permit book-fold printing by @potofcoffee in #2225 &amp; #2470</li> <li>Word2007 Writer : Add PageNumber to TOC by @jet-desk in #1652 &amp; #2471</li> <li>Word2007 Reader/Writer + ODText Reader/Writer : Add Element Formula in  by @Progi1984 in #2477</li> <li>Add Support for Various Missing Features in HTML Writer by @oleibman in #2475</li> <li>Fixed addHTML (text-align:right in html is not handled correctly) in #2467</li> <li>HTML Writer : Added ability to specify generic fallback font </li> <li>HTML Writer : Added ability to specify handling of whitespace</li> <li>HTML Writer : Added support for Table Border style, color, and size</li> <li>HTML Writer : Added support for empty paragraphs (Word writer permits, browsers generally suppress)</li> <li>HTML Writer : Paragraph style should support indentation, line-height, page-break-before</li> <li>HTML Writer : Removed margin-top/bottom when spacing is null in Paragraph style</li> <li>HTML Writer : Added default paragraph style to all paragraphs, as well as class Normal</li> <li>HTML Writer : Use css @page and page declarations for sections</li> <li>HTML Writer : Wrap sections in div, with page break before each (except first)</li> <li>PDF Writer : Added support for PageBreak</li> <li>PDF Writer : Added callback for modifying the HTML</li> <li>Added Support for Language, both for document overall and individual text elements</li> <li>Template : Set a checkbox by @nxtpge in #2509</li> <li>ODText / RTF / Word2007 Writer : Add field FILENAME by @milkyway-git in #2510</li> <li>ODText Reader : Improve Section Reader by @oleibman in #2507</li> </ul>"},{"location":"changes/1.x/1.2.0.html#bug-fixes","title":"Bug fixes","text":"<ul> <li>Fixed wrong mimetype for docx files by @gamerlv in GH-2416</li> <li>Word2007 Reader : Read hyperlingks in headings by @hannesdorn in GH-2433</li> <li>PclZip : strtr using empty string by @spl1nes in GH-2432</li> <li>Fixed PHP 8.2 deprecated about Allow access to an undefined property by @DAdq26 in GH-2440</li> <li>Template Processor : Fixed choose dimention for Float Value by @gdevilbat in GH-2449</li> <li>HTML Parser : Fix image parsing from url without extension by @JokubasR in GH-2459</li> <li>Word2007 Reader : Fixed reading of Office365 DocX file by @filippotoso &amp; @lfglopes in #2506</li> <li>Word2007 Reader : Check for null on $fontDefaultStyle by @spatialfree in #2513</li> </ul>"},{"location":"changes/1.x/1.2.0.html#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Added PHPStan by @PowerKiKi in GH-2405</li> <li>Bump symfony/process from 4.4.44 to 5.4.26 by @dependabot in GH-2431</li> <li>Bump phpunit/phpunit from 9.6.8 to 9.6.10 by @dependabot in GH-2430</li> <li>Added Coveralls.io by @Progi1984 in GH-2452</li> <li>Added support for PHP 8.2 &amp; PHP 8.3 by @Progi1984 in GH-2453</li> <li>Moved documention from ReadTheDocs to MkDocs &amp; Github Pages by @Progi1984 in GH-2465</li> <li>Bump phpstan/phpstan-phpunit from 1.3.13 to 1.3.14 by @dependabot in #2457</li> <li>Bump symfony/process from 5.4.26 to 5.4.28 by @dependabot in #2456</li> <li>Bump phpunit/phpunit from 9.6.10 to 9.6.11 by @dependabot in #2455</li> <li>Remove deprecated utf8_encode in PHP 8.2 by @mhcwebdesign in #2447 &amp; #2472</li> <li>Bump mpdf/mpdf from 8.1.6 to 8.2.0 by @dependabot in #2480</li> <li>Bump phpunit/phpunit from 9.6.11 to 9.6.13 by @dependabot in #2481</li> <li>Bump tecnickcom/tcpdf from 6.6.2 to 6.6.5 by @dependabot in #2482</li> <li>Bump phpmd/phpmd from 2.13.0 to 2.14.1 by @dependabot in #2483</li> <li>Bump phpstan/phpstan-phpunit from 1.3.14 to 1.3.15 by @dependabot in #2494</li> </ul>"},{"location":"changes/1.x/1.2.0.html#bc-breaks","title":"BC Breaks","text":"<ul> <li>Removed dependency <code>laminas/laminas-escaper</code></li> <li>Unintended Break TemplateProcessor Does Not Persist File After Destruct. #2539 To be fixed by [#2545](https://github.com/PHPOffice/PHPWord/pull/2545</li> </ul>"},{"location":"changes/1.x/1.3.0.html","title":"1.3.0","text":"<p>Full Changelog</p>"},{"location":"changes/1.x/1.3.0.html#enhancements","title":"Enhancements","text":"<ul> <li>IOFactory : Added extractVariables method to extract variables from a document @sibalonat in #2515</li> <li>PDF Writer : Documented how to specify a PDF renderer, when working with the PDF writer, as well as the three available choices by @settermjd in #2642</li> <li>Word2007 Reader: Support for Paragraph Border Style by @damienfa in #2651</li> <li>Word2007 Writer: Support for field REF by @crystoline in #2652</li> <li>Word2007 Reader : Support for FormFields by @vincentKool in #2653</li> <li>RTF Writer : Support for Table Border Style fixing #345 by @Progi1984 in #2656</li> <li>Word2007 Reader: Support the page break () by @stanolacko in #2662</li> <li>MsDoc Reader: Support for UTF-8 characters by [@Progi1984] fixing #881, #1454, #1817, #1927, #2383, #2565 in #2664</li> <li>Word2007 Writer: Added support for multiples comment for the same text by @rodrigoq fixing #2109 in #2665</li> </ul>"},{"location":"changes/1.x/1.3.0.html#bug-fixes","title":"Bug fixes","text":"<ul> <li>MsDoc Reader : Correct Font Size Calculation by @oleibman fixing #2526 in #2531</li> <li>Html Reader : Process Titles as Headings not Paragraphs @0b10011 and @oleibman Issue #1692 PR #2533</li> <li>Generate Table Cell if Row Doesn't Have Any @oleibman fixing #2505 in #2516</li> <li>TemplateProcessor Persist File After Destruct @oleibman fixing #2539 in #2545</li> <li>TemplateProcessor Destructor Problem with Php7 @oleibman fixing #2548 in #2554</li> <li>bug: TemplateProcessor fix multiline values @gimler fixing #268, #2323 and #2486 in #2522</li> <li>32-bit Problem in PasswordEncoder @oleibman fixing #2550 in #2551</li> <li>Typo : Fix hardcoded macro chars in TemplateProcessor method @glafarge in #2618</li> <li>XML Reader : Prevent fatal errors when opening corrupt files or \"doc\" files @mmcev106 in #2626</li> <li>Documentation : Updated Comment element by @laminga in #2650</li> <li>HTML Reader : Read width &amp; height attributes in points fixing #2589 by @Progi1984 in #2654</li> <li>Template Processor : Fixed bad naming of variables fixing #2586 by @Progi1984 in #2655</li> <li>Word2007 Writer : Fix first footnote appearing as separator #2634 by @jacksleight in #2635</li> <li>Template Processor : Fixed images with transparent backgrounds displaying a white background by @ElwynVdb in #2638</li> <li>HTML Writer : Fixed rowspan for tables by @andomiell in #2659</li> <li>Word2007 Writer : Fixed StrikeThrough property by @noec764 fixing #1722 &amp; #1693 in #2661</li> <li>HTML Reader : Fixed link without href by @asmundstavdahl fixing #1562 in #2663</li> </ul>"},{"location":"changes/1.x/1.3.0.html#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Bump dompdf/dompdf from 2.0.3 to 2.0.4 by @dependabot in #2530</li> <li>Bump phpunit/phpunit from 9.6.13 to 9.6.14 by @dependabot in #2519</li> <li>Bump mpdf/mpdf from 8.2.0 to 8.2.2 by @dependabot in #2518</li> <li>Bump phpmd/phpmd from 2.14.1 to 2.15.0 by @dependabot in #2538</li> <li>Bump phpunit/phpunit from 9.6.14 to 9.6.15 by @dependabot in #2537</li> <li>Bump symfony/process from 5.4.28 to 5.4.34 by @dependabot in #2536</li> <li>Allow rgb() when converting Html by @oleibman fixing #2508 in #2512</li> <li>Improved Issue Template by @Progi1984 in #2609</li> <li>Bump phpoffice/math from 0.1.0 to 0.2.0 by @Progi1984 fixing #2559 in #2645</li> <li>Bump tecnickcom/tcpdf from 6.6.5 to 6.7.5 by @dependabot in #2646</li> <li>Bump mpdf/mpdf from 8.2.2 to 8.2.4 by @dependabot in #2647</li> <li>Bump phenx/php-svg-lib from 0.5.1 to 0.5.4 by @dependabot in #2649</li> <li>Bump phpstan/phpstan-phpunit from 1.3.15 to 1.4.0 by @dependabot in #2648</li> </ul>"},{"location":"changes/1.x/1.3.0.html#bc-breaks","title":"BC Breaks","text":""},{"location":"changes/1.x/1.4.0.html","title":"1.4.0 (WIP)","text":"<p>Full Changelog</p>"},{"location":"changes/1.x/1.4.0.html#enhancements","title":"Enhancements","text":"<ul> <li> <p>Default Font: Allow specify Asisn font and Latin font separately</p> </li> <li> <p>Writer ODText: Support for ListItemRun by @Progi1984 fixing #2159, #2620 in #2669</p> </li> <li>Writer HTML: Support for vAlign in Tables by @SpraxDev in #2675</li> <li>Writer Word2007: Support for padding in Table Cell by @Azamat8405 in #2697</li> <li>Added support for PHP 8.4 by @Progi1984 in #2660</li> <li>Autoload : Allow to use PHPWord without Composer fixing #2543, #2552, #2716, #2717 in #2722</li> <li>Add Default font color for Word by @Collie-IT in #2700</li> <li>Writer HTML: Support Default font color by @MichaelPFrey in #2731</li> <li>Writer ODText: Support Default font color by @MichaelPFrey in #2735</li> <li>Add basic ruby text (phonetic guide) support for Word2007 and HTML Reader/Writer, RTF Writer, basic support for ODT writing by @Deadpikle in #2727</li> <li>Reader HTML: Support font styles for h1/h6 by @Progi1984 fixing #2619 in #2737</li> <li>Writer EPub3: Basic support by @Sambit003 fixing #55 in #2724</li> <li>Writer2007: Added support for background and border color transparency in Text Box element @chudy20007 in #2555</li> </ul>"},{"location":"changes/1.x/1.4.0.html#bug-fixes","title":"Bug fixes","text":"<ul> <li>Writer ODText: Support for images inside a textRun by @Progi1984 fixing #2240 in #2668</li> <li>Allow vAlign and vMerge on Style\\Cell to be set to null by @SpraxDev fixing #2673 in #2676</li> <li>Reader HTML: Support for differents size units for table by @Progi1984 fixing #2384, #2701 in #2725</li> <li>Reader Word2007: Respect paragraph indent units by @tugmaks &amp; @Progi1984 fixing #507 in #2726</li> <li>Reader Word2007: Support Header elements within Title elements by @SpraxDev fixing #2616, #2426 in #2674</li> <li>Reader HTML: Support for inherit value for property line-height by @Progi1984 fixing #2683 in #2733</li> <li>Writer HTML: Fixed null string for Text Elements by @armagedon007 and @Progi1984 in #2738</li> <li>Template Processor: Fix 0 considered as empty string by @cavasinf, @SnipsMine and @Progi1984 fixing #2572, #2703 in #2748</li> </ul>"},{"location":"changes/1.x/1.4.0.html#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Bump dompdf/dompdf from 2.0.4 to 3.0.0 by @dependabot fixing #2621 in #2666</li> <li>Add test case to make sure vMerge defaults to 'continue' by @SpraxDev in #2677</li> <li>Adding the possibility to use iterate search and replace with setValues by @moghwan in #2632</li> <li>Add test cases that test the ODTText and Word2007 reader using the corresponding writer, increasing test coverage by @MichaelPFrey in #2745</li> </ul>"},{"location":"changes/1.x/1.4.0.html#deprecations","title":"Deprecations","text":"<ul> <li>Deprecate <code>PhpOffice\\PhpWord\\Style\\Paragraph::getIndent()</code> : Use <code>PhpOffice\\PhpWord\\Style\\Paragraph::getIndentLeft()</code></li> <li>Deprecate <code>PhpOffice\\PhpWord\\Style\\Paragraph::setHanging()</code> : Use <code>PhpOffice\\PhpWord\\Style\\Paragraph::setIndentHanging()</code></li> <li>Deprecate <code>PhpOffice\\PhpWord\\Style\\Paragraph::setIndent()</code> : Use <code>PhpOffice\\PhpWord\\Style\\Paragraph::setIndentLeft()</code></li> </ul>"},{"location":"changes/1.x/1.4.0.html#bc-breaks","title":"BC Breaks","text":""},{"location":"changes/1.x/1.4.0.html#notes","title":"Notes","text":"<ul> <li>Writer ODText previously used to set 'style:use-window-font-color' to 'true', now it is set to 'false'. (see #2735)   The effect of this attribute is \"implementation dependent\" (if implemented at all).   Setting it to false allows setting a default font color and improves interoperabilt,   but may break certain specific use cases.</li> </ul>"},{"location":"usage/containers.html","title":"Containers","text":"<p>Containers are objects where you can put elements (texts, lists, tables, etc). There are 3 main containers, i.e. sections, headers, and footers.There are 3 elements that can also act as containers, i.e. textruns, table cells, and footnotes.</p>"},{"location":"usage/containers.html#sections","title":"Sections","text":"<p>Every visible element in word is placed inside of a section. To create a section, use the following code:</p> <pre><code>&lt;?php\n\n$section = $phpWord-&gt;addSection($sectionStyle);\n</code></pre> <p>The <code>$sectionStyle</code> is an optional associative array that sets the section. Example:</p> <pre><code>&lt;?php\n\n$sectionStyle = array(\n    'orientation' =&gt; 'landscape',\n    'marginTop' =&gt; 600,\n    'colsNum' =&gt; 2,\n);\n</code></pre>"},{"location":"usage/containers.html#page-number","title":"Page number","text":"<p>You can change a section page number by using the <code>pageNumberingStart</code> style of the section.</p> <pre><code>&lt;?php\n\n// Method 1\n$section = $phpWord-&gt;addSection(array('pageNumberingStart' =&gt; 1));\n\n// Method 2\n$section = $phpWord-&gt;addSection();\n$section-&gt;getStyle()-&gt;setPageNumberingStart(1);\n</code></pre>"},{"location":"usage/containers.html#multicolumn","title":"Multicolumn","text":"<p>You can change a section layout to multicolumn (like in a newspaper) by using the <code>breakType</code> and <code>colsNum</code> style of the section.</p> <pre><code>&lt;?php\n\n// Method 1\n$section = $phpWord-&gt;addSection(array('breakType' =&gt; 'continuous', 'colsNum' =&gt; 2));\n\n// Method 2\n$section = $phpWord-&gt;addSection();\n$section-&gt;getStyle()-&gt;setBreakType('continuous');\n$section-&gt;getStyle()-&gt;setColsNum(2);\n</code></pre>"},{"location":"usage/containers.html#line-numbering","title":"Line numbering","text":"<p>You can apply line numbering to a section by using the <code>lineNumbering</code> style of the section.</p> <pre><code>&lt;?php\n\n// Method 1\n$section = $phpWord-&gt;addSection(array('lineNumbering' =&gt; array()));\n\n// Method 2\n$section = $phpWord-&gt;addSection();\n$section-&gt;getStyle()-&gt;setLineNumbering(array());\n</code></pre> <p>Below are the properties of the line numbering style.</p> <ul> <li><code>start</code> Line numbering starting value</li> <li><code>increment</code> Line number increments</li> <li><code>distance</code> Distance between text and line numbering in twip</li> <li><code>restart</code> Line numbering restart setting    continuous|newPage|newSection</li> </ul>"},{"location":"usage/containers.html#headers","title":"Headers","text":"<p>Each section can have its own header reference. To create a header use the <code>addHeader</code> method:</p> <pre><code>&lt;?php\n\n$header = $section-&gt;addHeader();\n</code></pre> <p>Be sure to save the result in a local object. You can use all elements that are available for the footer. See \"Footer\" section for detail. Additionally, only inside of the header reference you can add watermarks or background pictures. See \"Watermarks\" section.</p> <p>You can pass an optional parameter to specify where the header/footer should be applied, it can be</p> <ul> <li><code>Footer::AUTO</code> default, all pages except if overridden by first or even</li> <li><code>Footer::FIRST</code> each first page of the section</li> <li><code>Footer::EVEN</code> each even page of the section. Will only be applied if the evenAndOddHeaders is set to true in phpWord-&gt;settings</li> </ul> <p>To change the evenAndOddHeaders use the <code>getSettings</code> method to return the Settings object, and then call the <code>setEvenAndOddHeaders</code> method:</p> <pre><code>&lt;?php\n\n$phpWord-&gt;getSettings()-&gt;setEvenAndOddHeaders(true);\n</code></pre>"},{"location":"usage/containers.html#footers","title":"Footers","text":"<p>Each section can have its own footer reference. To create a footer, use the <code>addFooter</code> method:</p> <pre><code>&lt;?php\n\n$footer = $section-&gt;addFooter();\n</code></pre> <p>Be sure to save the result in a local object to add elements to a footer. You can add the following elements to footers:</p> <ul> <li>Texts <code>addText</code> and <code>createTextrun</code></li> <li>Text breaks</li> <li>Images</li> <li>Tables</li> <li>Preserve text</li> </ul> <p>See the \"Elements\" section for the detail of each elements.</p>"},{"location":"usage/containers.html#other-containers","title":"Other containers","text":"<p>Textruns, table cells, and footnotes are elements that can also act as containers. See the corresponding \"Elements\" section for the detail of each elements.</p>"},{"location":"usage/introduction.html","title":"Introduction","text":""},{"location":"usage/introduction.html#basic-example","title":"Basic example","text":"<p>The following is a basic example of the PHPWord library. More examples are provided in the samples folder.</p> <pre><code>&lt;?php\n\n// Creating the new document...\n$phpWord = new \\PhpOffice\\PhpWord\\PhpWord();\n\n/* Note: any element you append to a document must reside inside of a Section. */\n\n// Adding an empty Section to the document...\n$section = $phpWord-&gt;addSection();\n// Adding Text element to the Section having font styled by default...\n$section-&gt;addText(\n    '\"Learn from yesterday, live for today, hope for tomorrow. '\n        . 'The important thing is not to stop questioning.\" '\n        . '(Albert Einstein)'\n);\n\n/*\n * Note: it's possible to customize font style of the Text element you add in three ways:\n * - inline;\n * - using named font style (new font style object will be implicitly created);\n * - using explicitly created font style object.\n */\n\n// Adding Text element with font customized inline...\n$section-&gt;addText(\n    '\"Great achievement is usually born of great sacrifice, '\n        . 'and is never the result of selfishness.\" '\n        . '(Napoleon Hill)',\n    array('name' =&gt; 'Tahoma', 'size' =&gt; 10)\n);\n\n// Adding Text element with font customized using named font style...\n$fontStyleName = 'oneUserDefinedStyle';\n$phpWord-&gt;addFontStyle(\n    $fontStyleName,\n    array('name' =&gt; 'Tahoma', 'size' =&gt; 10, 'color' =&gt; '1B2232', 'bold' =&gt; true)\n);\n$section-&gt;addText(\n    '\"The greatest accomplishment is not in never falling, '\n        . 'but in rising again after you fall.\" '\n        . '(Vince Lombardi)',\n    $fontStyleName\n);\n\n// Adding Text element with font customized using explicitly created font style object...\n$fontStyle = new \\PhpOffice\\PhpWord\\Style\\Font();\n$fontStyle-&gt;setBold(true);\n$fontStyle-&gt;setName('Tahoma');\n$fontStyle-&gt;setSize(13);\n$myTextElement = $section-&gt;addText('\"Believe you can and you\\'re halfway there.\" (Theodor Roosevelt)');\n$myTextElement-&gt;setFontStyle($fontStyle);\n\n// Saving the document as OOXML file...\n$objWriter = \\PhpOffice\\PhpWord\\IOFactory::createWriter($phpWord, 'Word2007');\n$objWriter-&gt;save('helloWorld.docx');\n\n// Saving the document as ODF file...\n$objWriter = \\PhpOffice\\PhpWord\\IOFactory::createWriter($phpWord, 'ODText');\n$objWriter-&gt;save('helloWorld.odt');\n\n// Saving the document as HTML file...\n$objWriter = \\PhpOffice\\PhpWord\\IOFactory::createWriter($phpWord, 'HTML');\n$objWriter-&gt;save('helloWorld.html');\n\n/* Note: we skip RTF, because it's not XML-based and requires a different example. */\n/* Note: we skip PDF, because \"HTML-to-PDF\" approach is used to create PDF documents. */\n</code></pre>"},{"location":"usage/introduction.html#phpword-settings","title":"PHPWord Settings","text":"<p>The <code>PhpOffice\\PhpWord\\Settings</code> class provides some options that will affect the behavior of PHPWord. Below are the options.</p>"},{"location":"usage/introduction.html#xml-writer-compatibility","title":"XML Writer compatibility","text":"<p>This option sets XMLWriter::setIndent and XMLWriter::setIndentString. The default value of this option is <code>true</code> (compatible), which is required for OpenOffice to render OOXML document correctly. You can set this option to <code>false</code> during development to make the resulting XML file easier to read.</p> <pre><code>&lt;?php\n\n\\PhpOffice\\PhpWord\\Settings::setCompatibility(false);\n</code></pre>"},{"location":"usage/introduction.html#zip-class","title":"Zip class","text":"<p>By default, PHPWord uses Zip extension to deal with ZIP compressed archives and files inside them. If you can't have Zip extension installed on your server, you can use pure PHP library alternative, `PclZip``, which is included in PHPWord.</p> <pre><code>&lt;?php\n\n\\PhpOffice\\PhpWord\\Settings::setZipClass(\\PhpOffice\\PhpWord\\Settings::PCLZIP);\n</code></pre>"},{"location":"usage/introduction.html#output-escaping","title":"Output escaping","text":"<p>Writing documents of some formats, especially XML-based, requires correct output escaping. Without it your document may become broken when you put special characters like ampersand, quotes, and others in it.</p> <p>Escaping can be performed in two ways: outside of the library by a software developer and inside of the library by built-in mechanism. By default, the built-in mechanism is disabled for backward compatibility with versions prior to v0.13.0. To turn it on set <code>outputEscapingEnabled</code> option to <code>true</code> in your PHPWord configuration file or use the following instruction at runtime:</p> <pre><code>&lt;?php\n\n\\PhpOffice\\PhpWord\\Settings::setOutputEscapingEnabled(true);\n</code></pre>"},{"location":"usage/introduction.html#default-paper","title":"Default Paper","text":"<p>By default, all sections of the document will print on A4 paper. You can alter the default paper by using the following function:</p> <pre><code>&lt;?php\n\n\\PhpOffice\\PhpWord\\Settings::setDefaultPaper('Letter');\n</code></pre>"},{"location":"usage/introduction.html#default-font","title":"Default font","text":"<p>By default, every text appears in Arial 10 point in the color black (000000). You can alter the default font by using the following functions:</p> <pre><code>&lt;?php\n\n$phpWord-&gt;setDefaultFontName('Times New Roman');\n$phpWord-&gt;setDefaultFontColor('FF0000');\n$phpWord-&gt;setDefaultFontSize(12);\n</code></pre> <p>Or you can specify Asian Font</p> <pre><code>&lt;?php\n\n$phpWord-&gt;setDefaultAsianFontName('\u6a19\u6977\u9ad4');\n</code></pre>"},{"location":"usage/introduction.html#document-settings","title":"Document settings","text":"<p>Settings for the generated document can be set using <code>$phpWord-&gt;getSettings()</code></p>"},{"location":"usage/introduction.html#magnification-setting","title":"Magnification Setting","text":"<p>The default zoom value is 100 percent. This can be changed either to another percentage</p> <pre><code>&lt;?php\n\n$phpWord-&gt;getSettings()-&gt;setZoom(75);\n</code></pre> <p>Or to predefined values <code>fullPage</code>, <code>bestFit</code>, <code>textFit</code></p> <pre><code>&lt;?php\n\n$phpWord-&gt;getSettings()-&gt;setZoom(Zoom::BEST_FIT);\n</code></pre>"},{"location":"usage/introduction.html#mirroring-the-page-margins","title":"Mirroring the Page Margins","text":"<p>Use mirror margins to set up facing pages for double-sided documents, such as books or magazines.</p> <pre><code>&lt;?php\n\n$phpWord-&gt;getSettings()-&gt;setMirrorMargins(true);\n</code></pre> <p>Don't forget to set both paper size and page size</p> <p>For example, to print a document on A4 paper (landscape) and fold it into A5 pages (portrait), use this section style:</p> <pre><code>&lt;?php\n\nuse PhpOffice\\PhpWord\\Shared\\Converter;\n\n$phpWord-&gt;getSettings()-&gt;setMirrorMargins(true);\n$phpWord-&gt;addSection([\n    'paperSize' =&gt; 'A4',\n    'orientation' =&gt; 'landscape',\n    'pageSizeW' =&gt; Converter::cmToTwip(14.85),\n    'pageSizeH' =&gt; Converter::cmToTwip(21),\n]);\n</code></pre>"},{"location":"usage/introduction.html#printing-as-folded-booklet","title":"Printing as folded booklet","text":"<p>Use book-fold printing to set up documents to be printed as foldable pages.</p> <pre><code>&lt;?php\n\n$phpWord-&gt;getSettings()-&gt;setBookFoldPrinting(true);\n</code></pre>"},{"location":"usage/introduction.html#spelling-and-grammatical-checks","title":"Spelling and grammatical checks","text":"<p>By default spelling and grammatical errors are shown as soon as you open a word document. For big documents this can slow down the opening of the document. You can hide the spelling and/or grammatical errors with:</p> <pre><code>&lt;?php\n\n$phpWord-&gt;getSettings()-&gt;setHideGrammaticalErrors(true);\n$phpWord-&gt;getSettings()-&gt;setHideSpellingErrors(true);\n</code></pre> <p>You can also specify the status of the spell and grammar checks, marking spelling or grammar as dirty will force a re-check when opening the document.</p> <pre><code>&lt;?php\n\n$proofState = new \\PhpOffice\\PhpWord\\ComplexType\\ProofState();\n$proofState-&gt;setGrammar(\\PhpOffice\\PhpWord\\ComplexType\\ProofState::CLEAN);\n$proofState-&gt;setSpelling(\\PhpOffice\\PhpWord\\ComplexType\\ProofState::DIRTY);\n\n$phpWord-&gt;getSettings()-&gt;setProofState($proofState);\n</code></pre>"},{"location":"usage/introduction.html#track-revisions","title":"Track Revisions","text":"<p>Track changes can be activated using <code>setTrackRevisions</code>, you can furture specify</p> <ul> <li>Not to use move syntax, instead moved items will be seen as deleted in one place and added in another</li> <li>Not track formatting revisions</li> </ul> <pre><code>&lt;?php\n\n$phpWord-&gt;getSettings()-&gt;setTrackRevisions(true);\n$phpWord-&gt;getSettings()-&gt;setDoNotTrackMoves(true);\n$phpWord-&gt;getSettings()-&gt;setDoNotTrackFormatting(true);\n</code></pre>"},{"location":"usage/introduction.html#decimal-symbol","title":"Decimal Symbol","text":"<p>The default symbol to represent a decimal figure is the <code>.</code> in english. In french you might want to change it to <code>,</code> for instance.</p> <pre><code>&lt;?php\n\n$phpWord-&gt;getSettings()-&gt;setDecimalSymbol(',');\n</code></pre>"},{"location":"usage/introduction.html#document-language","title":"Document Language","text":"<p>The default language of the document can be change with the following.</p> <pre><code>&lt;?php\n\n$phpWord-&gt;getSettings()-&gt;setThemeFontLang(new Language(Language::FR_BE));\n</code></pre> <p><code>Language</code> has 3 parameters, one for Latin languages, one for East Asian languages and one for Complex (Bi-Directional) languages. A couple of language codes are provided in the <code>PhpOffice\\PhpWord\\Style\\Language</code> class but any valid code/ID can be used.</p> <p>In case you are generating an RTF document the language need to be set differently.</p> <pre><code>&lt;?php\n\n$lang = new Language();\n$lang-&gt;setLangId(Language::EN_GB_ID);\n$phpWord-&gt;getSettings()-&gt;setThemeFontLang($lang);\n</code></pre>"},{"location":"usage/introduction.html#document-information","title":"Document information","text":"<p>You can set the document information such as title, creator, and company name. Use the following functions:</p> <pre><code>&lt;?php\n\n$properties = $phpWord-&gt;getDocInfo();\n$properties-&gt;setCreator('My name');\n$properties-&gt;setCompany('My factory');\n$properties-&gt;setTitle('My title');\n$properties-&gt;setDescription('My description');\n$properties-&gt;setCategory('My category');\n$properties-&gt;setLastModifiedBy('My name');\n$properties-&gt;setCreated(mktime(0, 0, 0, 3, 12, 2014));\n$properties-&gt;setModified(mktime(0, 0, 0, 3, 14, 2014));\n$properties-&gt;setSubject('My subject');\n$properties-&gt;setKeywords('my, key, word');\n</code></pre>"},{"location":"usage/introduction.html#measurement-units","title":"Measurement units","text":"<p>The base length unit in Open Office XML is twip. Twip means \"TWentieth of an Inch Point\", i.e. 1 twip = 1/1440 inch.</p> <p>You can use PHPWord helper functions to convert inches, centimeters, or points to twip.</p> <pre><code>&lt;?php\n\n// Paragraph with 6 points space after\n$phpWord-&gt;addParagraphStyle('My Style', array(\n    'spaceAfter' =&gt; \\PhpOffice\\PhpWord\\Shared\\Converter::pointToTwip(6))\n);\n\n$section = $phpWord-&gt;addSection();\n$sectionStyle = $section-&gt;getStyle();\n// half inch left margin\n$sectionStyle-&gt;setMarginLeft(\\PhpOffice\\PhpWord\\Shared\\Converter::inchToTwip(.5));\n// 2 cm right margin\n$sectionStyle-&gt;setMarginRight(\\PhpOffice\\PhpWord\\Shared\\Converter::cmToTwip(2));\n</code></pre>"},{"location":"usage/introduction.html#document-protection","title":"Document protection","text":"<p>The document (or parts of it) can be password protected.</p> <pre><code>&lt;?php\n\n$documentProtection = $phpWord-&gt;getSettings()-&gt;getDocumentProtection();\n$documentProtection-&gt;setEditing(DocProtect::READ_ONLY);\n$documentProtection-&gt;setPassword('myPassword');\n</code></pre>"},{"location":"usage/introduction.html#automatically-recalculate-fields-on-open","title":"Automatically Recalculate Fields on Open","text":"<p>To force an update of the fields present in the document, set updateFields to true</p> <pre><code>&lt;?php\n\n$phpWord-&gt;getSettings()-&gt;setUpdateFields(true);\n</code></pre>"},{"location":"usage/introduction.html#hyphenation","title":"Hyphenation","text":"<p>Hyphenation describes the process of breaking words with hyphens. There are several options to control hyphenation.</p>"},{"location":"usage/introduction.html#auto-hyphenation","title":"Auto hyphenation","text":"<p>To automatically hyphenate text set <code>autoHyphenation</code> to <code>true</code>.</p> <pre><code>&lt;?php\n\n$phpWord-&gt;getSettings()-&gt;setAutoHyphenation(true);\n</code></pre>"},{"location":"usage/introduction.html#consecutive-hyphen-limit","title":"Consecutive Hyphen Limit","text":"<p>The maximum number of consecutive lines of text ending with a hyphen can be controlled by the <code>consecutiveHyphenLimit</code> option. There is no limit if the option is not set or the provided value is <code>0</code>.</p> <pre><code>&lt;?php\n\n$phpWord-&gt;getSettings()-&gt;setConsecutiveHyphenLimit(2);\n</code></pre>"},{"location":"usage/introduction.html#hyphenation-zone","title":"Hyphenation Zone","text":"<p>The hyphenation zone (in twip) is the allowed amount of whitespace before hyphenation is applied. The smaller the hyphenation zone the more words are hyphenated. Or in other words, the wider the hyphenation zone the less words are hyphenated.</p> <pre><code>&lt;?php\n\n$phpWord-&gt;getSettings()-&gt;setHyphenationZone(\\PhpOffice\\PhpWord\\Shared\\Converter::cmToTwip(1));\n</code></pre>"},{"location":"usage/introduction.html#hyphenate-caps","title":"Hyphenate Caps","text":"<p>To control whether or not words in all capital letters shall be hyphenated use the <code>doNotHyphenateCaps</code> option.</p> <pre><code>&lt;?php\n\n$phpWord-&gt;getSettings()-&gt;setDoNotHyphenateCaps(true);\n</code></pre>"},{"location":"usage/readers.html","title":"Readers","text":""},{"location":"usage/readers.html#html","title":"HTML","text":"<p>The name of the reader is <code>HTML</code>.</p> <pre><code>&lt;?php\n\n$reader = IOFactory::createReader('HTML');\n$reader-&gt;load(__DIR__ . '/sample.html');\n</code></pre>"},{"location":"usage/readers.html#msdoc","title":"MsDoc","text":"<p>The name of the reader is <code>MsDoc</code>.</p> <pre><code>&lt;?php\n\n$reader = IOFactory::createReader('MsDoc');\n$reader-&gt;load(__DIR__ . '/sample.doc');\n</code></pre>"},{"location":"usage/readers.html#odtext","title":"ODText","text":"<p>The name of the reader is <code>ODText</code>.</p> <pre><code>&lt;?php\n\n$reader = IOFactory::createReader('ODText');\n$reader-&gt;load(__DIR__ . '/sample.odt');\n</code></pre>"},{"location":"usage/readers.html#rtf","title":"RTF","text":"<p>The name of the reader is <code>RTF</code>.</p> <pre><code>&lt;?php\n\n$reader = IOFactory::createReader('RTF');\n$reader-&gt;load(__DIR__ . '/sample.rtf');\n</code></pre>"},{"location":"usage/readers.html#word2007","title":"Word2007","text":"<p>The name of the reader is <code>Word2007</code>.</p> <pre><code>&lt;?php\n\n$reader = IOFactory::createReader('Word2007');\n$reader-&gt;load(__DIR__ . '/sample.docx');\n</code></pre>"},{"location":"usage/template.html","title":"Template processing","text":"<p>You can create an OOXML document template with included search-patterns (macros) which can be replaced by any value you wish. Only single-line values can be replaced. By default Macros are defined like this: <code>${search-pattern}</code> but you can define custom macros. To load a template file, create a new instance of the TemplateProcessor.</p> <pre><code>&lt;?php\n\n$templateProcessor = new TemplateProcessor('Template.docx');\n</code></pre>"},{"location":"usage/template.html#setvalue","title":"setValue","text":"<p>Given a template containing</p> <pre><code>Hello ${firstname} ${lastname}!\n</code></pre> <p>The following will replace <code>${firstname}</code> with <code>John</code>, and <code>${lastname}</code> with <code>Doe</code> . The resulting document will now contain <code>Hello John Doe!</code></p> <pre><code>&lt;?php\n\n$templateProcessor-&gt;setValue('firstname', 'John');\n$templateProcessor-&gt;setValue('lastname', 'Doe');\n</code></pre>"},{"location":"usage/template.html#setvalues","title":"setValues","text":"<p>You can also set multiple values by passing all of them in an array.</p> <pre><code>&lt;?php\n\n$templateProcessor-&gt;setValues(array('firstname' =&gt; 'John', 'lastname' =&gt; 'Doe'));\n</code></pre>"},{"location":"usage/template.html#setcheckbox","title":"setCheckbox","text":"<p>Given a template containing a checkbox control with the title or tag named:</p> <p><pre><code>${checkbox}\n</code></pre> The following will check the checkbox:</p> <pre><code>&lt;?php\n\n$templateProcessor-&gt;setCheckbox('checkbox', true);\n</code></pre> <p>To add a checkbox and set its title or tag in a template</p> <ol> <li>Go to Developer tab &gt; Controls group</li> <li>Select the Check Box Content Control</li> <li>Right-click on your checkbox</li> <li>Click on Properties</li> <li>Set the title or the tag</li> </ol> <p>These steps may change regarding the version of Microsoft Word used.</p>"},{"location":"usage/template.html#setmacroopeningchars","title":"setMacroOpeningChars","text":"<p>You can define a custom opening macro. The following will set <code>{#</code> as the opening search pattern.</p> <pre><code>&lt;?php\n\n$templateProcessor-&gt;setMacroOpeningChars('{#');\n</code></pre>"},{"location":"usage/template.html#setmacroclosingchars","title":"setMacroClosingChars","text":"<p>You can define a custom closing macro. The following will set <code>#}</code> as the closing search pattern.</p> <pre><code>&lt;?php\n\n$templateProcessor-&gt;setMacroClosingChars('#}');\n</code></pre>"},{"location":"usage/template.html#setmacrochars","title":"setMacroChars","text":"<p>You can define a custom opening and closing macro at the same time . The following will set the search-pattern like this: <code>{#search-pattern#}</code> .</p> <pre><code>&lt;?php\n\n$templateProcessor-&gt;setMacroChars('{#', '#}');\n</code></pre>"},{"location":"usage/template.html#setimagevalue","title":"setImageValue","text":"<p>The search-pattern model for images can be like:     - <code>${search-image-pattern}</code>     - <code>${search-image-pattern:[width]:[height]:[ratio]}</code>     - <code>${search-image-pattern:[width]x[height]}</code>     - <code>${search-image-pattern:size=[width]x[height]}</code>     - <code>${search-image-pattern:width=[width]:height=[height]:ratio=false}</code></p> <p>Where:     - [width] and [height] can be just numbers or numbers with measure, which supported by Word (cm, mm, in, pt, pc, px, %, em, ex)     - [ratio] uses only for <code>false</code>, <code>-</code> or <code>f</code> to turn off respect aspect ration of image. By default template image size uses as 'container' size.</p> <p>Example:</p> <pre><code>${CompanyLogo}\n${UserLogo:50:50} ${Name} - ${City} - ${Street}\n</code></pre> <pre><code>&lt;?php\n\n$templateProcessor = new TemplateProcessor('Template.docx');\n$templateProcessor-&gt;setValue('Name', 'John Doe');\n$templateProcessor-&gt;setValue(array('City', 'Street'), array('Detroit', '12th Street'));\n\n$templateProcessor-&gt;setImageValue('CompanyLogo', 'path/to/company/logo.png');\n$templateProcessor-&gt;setImageValue('UserLogo', array('path' =&gt; 'path/to/logo.png', 'width' =&gt; 100, 'height' =&gt; 100, 'ratio' =&gt; false));\n$templateProcessor-&gt;setImageValue('FeatureImage', function () {\n    // Closure will only be executed if the replacement tag is found in the template\n\n    return array('path' =&gt; SlowFeatureImageGenerator::make(), 'width' =&gt; 100, 'height' =&gt; 100, 'ratio' =&gt; false);\n});\n</code></pre>"},{"location":"usage/template.html#cloneblock","title":"cloneBlock","text":"<p>Given a template containing See <code>Sample_23_TemplateBlock.php</code> for an example.</p> <pre><code>${block_name}\nCustomer: ${customer_name}\nAddress: ${customer_address}\n${/block_name}\n</code></pre> <p>The following will duplicate everything between <code>${block_name}</code> and <code>${/block_name}</code> 3 times.</p> <pre><code>&lt;?php\n\n$templateProcessor-&gt;cloneBlock('block_name', 3, true, true);\n</code></pre> <p>The last parameter will rename any macro defined inside the block and add #1, #2, #3 ... to the macro name. The result will be</p> <pre><code>Customer: ${customer_name#1}\nAddress: ${customer_address#1}\n\nCustomer: ${customer_name#2}\nAddress: ${customer_address#2}\n\nCustomer: ${customer_name#3}\nAddress: ${customer_address#3}\n</code></pre> <p>It is also possible to pass an array with the values to replace the marcros with. If an array with replacements is passed, the <code>count</code> argument is ignored, it is the size of the array that counts.</p> <pre><code>&lt;?php\n\n$replacements = array(\n    array('customer_name' =&gt; 'Batman', 'customer_address' =&gt; 'Gotham City'),\n    array('customer_name' =&gt; 'Superman', 'customer_address' =&gt; 'Metropolis'),\n);\n$templateProcessor-&gt;cloneBlock('block_name', 0, true, false, $replacements);\n</code></pre> <p>The result will then be</p> <pre><code>Customer: Batman\nAddress: Gotham City\n\nCustomer: Superman\nAddress: Metropolis\n</code></pre>"},{"location":"usage/template.html#replaceblock","title":"replaceBlock","text":"<p>Given a template containing</p> <pre><code>${block_name}\nThis block content will be replaced\n${/block_name}\n</code></pre> <p>The following will replace everything between <code>${block_name}</code> and <code>${/block_name}</code> with the value passed.</p> <pre><code>&lt;?php\n\n$templateProcessor-&gt;replaceBlock('block_name', 'This is the replacement text.');\n</code></pre>"},{"location":"usage/template.html#deleteblock","title":"deleteBlock","text":"<p>Same as previous, but it deletes the block</p> <pre><code>&lt;?php\n\n$templateProcessor-&gt;deleteBlock('block_name');\n</code></pre>"},{"location":"usage/template.html#clonerow","title":"cloneRow","text":"<p>Clones a table row in a template document. See <code>Sample_07_TemplateCloneRow.php</code> for an example.</p> <pre><code>+-----------+----------------+\n| ${userId} | ${userName}    |\n|           |----------------+\n|           | ${userAddress} |\n+-----------+----------------+\n</code></pre> <pre><code>&lt;?php\n\n$templateProcessor-&gt;cloneRow('userId', 2);\n</code></pre> <p>Will result in</p> <pre><code> +-------------+------------------+\n| ${userId#1} | ${userName#1}    |\n|             |------------------+\n|             | ${userAddress#1} |\n+-------------+------------------+\n| ${userId#2} | ${userName#2}    |\n|             |------------------+\n|             | ${userAddress#2} |\n+-------------+------------------+\n</code></pre>"},{"location":"usage/template.html#clonerowandsetvalues","title":"cloneRowAndSetValues","text":"<p>Finds a row in a table row identified by <code>$search</code> param and clones it as many times as there are entries in <code>$values</code>.</p> <pre><code>+-----------+----------------+\n| ${userId} | ${userName}    |\n|           |----------------+\n|           | ${userAddress} |\n+-----------+----------------+\n</code></pre> <pre><code>&lt;?php\n\n$values = [\n    ['userId' =&gt; 1, 'userName' =&gt; 'Batman', 'userAddress' =&gt; 'Gotham City'],\n    ['userId' =&gt; 2, 'userName' =&gt; 'Superman', 'userAddress' =&gt; 'Metropolis'],\n];\n$templateProcessor-&gt;cloneRowAndSetValues('userId', $values);\n</code></pre> <p>Will result in</p> <pre><code>+---+-------------+\n| 1 | Batman      |\n|   |-------------+\n|   | Gotham City |\n+---+-------------+\n| 2 | Superman    |\n|   |-------------+\n|   | Metropolis  |\n+---+-------------+\n</code></pre>"},{"location":"usage/template.html#applyxslstylesheet","title":"applyXslStyleSheet","text":"<p>Applies the XSL stylesheet passed to header part, footer part and main part</p> <pre><code>&lt;?php\n\n$xslDomDocument = new \\DOMDocument();\n$xslDomDocument-&gt;load('/path/to/my/stylesheet.xsl');\n$templateProcessor-&gt;applyXslStyleSheet($xslDomDocument);\n</code></pre>"},{"location":"usage/template.html#setcomplexvalue","title":"setComplexValue","text":"<p>Replaces a ${macro} with the ComplexType passed. See <code>Sample_40_TemplateSetComplexValue.php</code> for examples.</p> <pre><code>&lt;?php\n\n$inline = new TextRun();\n$inline-&gt;addText('by a red italic text', array('italic' =&gt; true, 'color' =&gt; 'red'));\n$templateProcessor-&gt;setComplexValue('inline', $inline);\n</code></pre>"},{"location":"usage/template.html#setcomplexblock","title":"setComplexBlock","text":"<p>Replaces a ${macro} with the ComplexType passed. See <code>Sample_40_TemplateSetComplexValue.php</code> for examples.</p> <pre><code>&lt;?php\n\n$table = new Table(array('borderSize' =&gt; 12, 'borderColor' =&gt; 'green', 'width' =&gt; 6000, 'unit' =&gt; TblWidth::TWIP));\n$table-&gt;addRow();\n$table-&gt;addCell(150)-&gt;addText('Cell A1');\n$table-&gt;addCell(150)-&gt;addText('Cell A2');\n$table-&gt;addCell(150)-&gt;addText('Cell A3');\n$table-&gt;addRow();\n$table-&gt;addCell(150)-&gt;addText('Cell B1');\n$table-&gt;addCell(150)-&gt;addText('Cell B2');\n$table-&gt;addCell(150)-&gt;addText('Cell B3');\n$templateProcessor-&gt;setComplexBlock('table', $table);\n</code></pre>"},{"location":"usage/template.html#setchartvalue","title":"setChartValue","text":"<p>Replace a variable by a chart.</p> <pre><code>&lt;?php\n\n$categories = array('A', 'B', 'C', 'D', 'E');\n$series1 = array(1, 3, 2, 5, 4);\n$chart = new Chart('doughnut', $categories, $series1);\n$templateProcessor-&gt;setChartValue('myChart', $chart);\n</code></pre>"},{"location":"usage/template.html#save","title":"save","text":"<p>Saves the loaded template within the current directory. Returns the file path.</p> <pre><code>&lt;?php\n\n$filepath = $templateProcessor-&gt;save();\n</code></pre>"},{"location":"usage/template.html#saveas","title":"saveAs","text":"<p>Saves a copy of the loaded template in the indicated path.</p> <pre><code>&lt;?php\n\n$pathToSave = 'path/to/save/file.ext';\n$templateProcessor-&gt;saveAs($pathToSave);\n</code></pre>"},{"location":"usage/writers.html","title":"Writers","text":""},{"location":"usage/writers.html#html","title":"HTML","text":"<p>The name of the writer is <code>HTML</code>.</p> <pre><code>&lt;?php\n\n$writer = IOFactory::createWriter($oPhpWord, 'HTML');\n$writer-&gt;save(__DIR__ . '/sample.html');\n</code></pre> <p>When generating html/pdf, you can alter the default handling of white space (normal), and/or supply a fallback generic font as follows:</p> <pre><code>$writer = IOFactory::createWriter($oPhpWord, 'HTML');\n$writer-&gt;setDefaultGenericFont('serif');\n$writer-&gt;setDefaultWhiteSpace('pre-wrap');\n$writer-&gt;save(__DIR__ . '/sample.html');\n</code></pre>"},{"location":"usage/writers.html#odtext","title":"ODText","text":"<p>The name of the writer is <code>ODText</code>.</p> <pre><code>&lt;?php\n\n$writer = IOFactory::createWriter($oPhpWord, 'ODText');\n$writer-&gt;save(__DIR__ . '/sample.docx');\n</code></pre>"},{"location":"usage/writers.html#pdf","title":"PDF","text":"<p>The name of the writer is <code>PDF</code>.</p> <pre><code>&lt;?php\n\n$writer = IOFactory::createWriter($oPhpWord, 'PDF');\n$writer-&gt;save(__DIR__ . '/sample.pdf');\n</code></pre> <p>To generate a PDF, the PhpWord object passes through HTML before generating the PDF. This HTML can be modified using a callback.</p> <pre><code>&lt;?php\n\n$writer = IOFactory::createWriter($oPhpWord, 'PDF');\n$writer-&gt;setEditCallback('cbEditHTML');\n$writer-&gt;save(__DIR__ . '/sample.pdf');\n\n/**\n * Add a meta tag generator\n */\nfunction cbEditHTML(string $inputHTML): string\n{\n    $beforeBody = '&lt;meta name=\"generator\" content=\"PHPWord\" /&gt;';\n    $needle = '&lt;/head&gt;';\n\n    $pos = strpos($inputHTML, $needle);\n    if ($pos !== false) {\n        $inputHTML = (string) substr_replace($inputHTML, \"$beforeBody\\n$needle\", $pos, strlen($needle));\n    }\n\n    return $inputHTML;\n}\n</code></pre>"},{"location":"usage/writers.html#options","title":"Options","text":"<p>You can define options like : * <code>font</code>: default font</p> <p>Options must be defined before creating the writer.</p> <pre><code>&lt;?php\n\nuse PhpOffice\\PhpWord\\Settings;\n\nSettings::setPdfRendererOptions([\n    'font' =&gt; 'Arial'\n]);\n\n$writer = IOFactory::createWriter($oPhpWord, 'PDF');\n$writer-&gt;save(__DIR__ . '/sample.pdf');\n</code></pre>"},{"location":"usage/writers.html#specify-the-pdf-renderer","title":"Specify the PDF Renderer","text":"<p>Before PHPWord can write a PDF, you must specify the renderer to use and the path to it. Currently, three renderers are supported: </p> <ul> <li>DomPDF</li> <li>MPDF</li> <li>TCPDF</li> </ul> <p>To specify the renderer you use two static <code>Settings</code> functions:</p> <ul> <li><code>setPdfRendererName</code>: This sets the name of the renderer library to use.   Provide one of <code>Settings</code>' three <code>PDF_</code> constants to the function call.</li> <li><code>setPdfRendererPath</code>: This sets the path to the renderer library.    This directory is the renderer's package directory within Composer's vendor directory.</li> </ul> <p>In the code below, you can see an example of setting MPDF as the desired PDF renderer.</p> <pre><code>Settings::setPdfRendererName(Settings::PDF_RENDERER_MPDF);\nSettings::setPdfRendererPath(__DIR__ . '/../vendor/mpdf/mpdf');\n</code></pre> <p>or you can edit settings in phpword.ini ( or phpword.ini.dist) file.</p> <pre><code>pdfRendererName       = MPDF    ;DomPDF, TCPDF, MPDF\npdfRendererPath       = /path/to/your/renderer/folder\n</code></pre>"},{"location":"usage/writers.html#rtf","title":"RTF","text":"<p>The name of the writer is <code>RTF</code>.</p> <pre><code>&lt;?php\n\n$writer = IOFactory::createWriter($oPhpWord, 'RTF');\n$writer-&gt;save(__DIR__ . '/sample.rtf');\n</code></pre>"},{"location":"usage/writers.html#word2007","title":"Word2007","text":"<p>The name of the writer is <code>Word2007</code>.</p> <pre><code>&lt;?php\n\n$writer = IOFactory::createWriter($oPhpWord, 'Word2007');\n$writer-&gt;save(__DIR__ . '/sample.docx');\n</code></pre>"},{"location":"usage/writers.html#zip-adapter","title":"ZIP Adapter","text":"<p>You can change the ZIP Adapter for the writer. By default, the ZIP Adapter is <code>ZipArchiveAdapter</code>.</p> <pre><code>&lt;?php\n\nuse PhpOffice\\Common\\Adapter\\Zip\\PclZipAdapter;\nuse PhpOffice\\Common\\Adapter\\Zip\\ZipArchiveAdapter;\n\n$writer = IOFactory::createWriter($oPhpWord, 'Word2007');\n$writer-&gt;setZipAdapter(new PclZipAdapter());\n$writer-&gt;save(__DIR__ . '/sample.docx');\n</code></pre>"},{"location":"usage/elements/index.html","title":"Elements","text":"<p>Below are the matrix of element availability in each container. The column shows the containers while the rows lists the elements.</p> Num Element Section Header Footer Cell Text Run Footnote 1 Text 2 Text Run 3 Link 4 Title 5 Preserve Text 6 Text Break 7 Page Break 8 List 9 Table 10 Image 11 Watermark 12 OLEObject 13 TOC 14 Footnote 15 Endnote 16 CheckBox 17 TextBox 18 Field 19 Line 20 Chart <p>Legend:</p> <ul> <li> : Available.</li> <li> : Available only when inside header/footer.</li> <li> : Available only when inside section.</li> <li> : Not available.</li> <li> : Should be available.</li> </ul>"},{"location":"usage/elements/chart.html","title":"Chart","text":"<p>Charts can be added using</p> <pre><code>&lt;?php\n\n$categories = array('A', 'B', 'C', 'D', 'E');\n$series = array(1, 3, 2, 5, 4);\n$chart = $section-&gt;addChart('line', $categories, $series, $style);\n</code></pre> <p>For available styling options, see <code>Styles &gt; Chart</code>.</p> <p>Check out the Sample_32_Chart.php for more options and styling.</p>"},{"location":"usage/elements/checkbox.html","title":"Checkbox","text":"<p>Checkbox elements can be added to sections or table cells by using <code>addCheckBox</code>.</p> <pre><code>&lt;?php\n\n$section-&gt;addCheckBox($name, $text, [$fontStyle], [$paragraphStyle]);\n</code></pre> <ul> <li><code>$name</code>. Name of the check box.</li> <li><code>$text</code>. Text to be displayed in the document.</li> <li><code>$fontStyle</code>. See <code>Styles &gt; Font</code>.</li> <li><code>$paragraphStyle</code>. See <code>Styles &gt; Paragraph</code>.</li> </ul>"},{"location":"usage/elements/comment.html","title":"Comment","text":"<p>Comments can be added to a document by using <code>addComment</code>. The comment can contain formatted text. Once the comment has been added, it can be linked to any element with <code>setCommentRangeStart</code>.</p> <pre><code>&lt;?php\n\n// first create a comment\n$comment= new \\PhpOffice\\PhpWord\\Element\\Comment('Authors name', new \\DateTime(), 'my_initials');\n$comment-&gt;addText('Test', array('bold' =&gt; true));\n\n// add it to the document\n$phpWord-&gt;addComment($comment);\n\n$textrun = $section-&gt;addTextRun();\n$textrun-&gt;addText('This ');\n$text = $textrun-&gt;addText('is');\n// link the comment to the text you just created\n$text-&gt;setCommentRangeStart($comment);\n$textrun-&gt;addText(' a test');\n</code></pre> <p>If no end is set for a comment using the <code>setCommentRangeEnd</code>, the comment will be ended automatically at the end of the element it is started on.</p>"},{"location":"usage/elements/field.html","title":"Field","text":"<p>Currently the following fields are supported:</p> <ul> <li>PAGE</li> <li>NUMPAGES</li> <li>DATE</li> <li>XE</li> <li>INDEX</li> <li>FILENAME</li> <li>REF</li> </ul> <pre><code>&lt;?php\n\n$section-&gt;addField($fieldType, [$properties], [$options], [$fieldText], [$fontStyle])\n</code></pre> <ul> <li><code>$fontStyle</code>. See <code>Styles &gt; Font</code>.</li> </ul> <p>See <code>\\PhpOffice\\PhpWord\\Element\\Field</code> for list of properties and options available for each field type. Options which are not specifically defined can be added. Those must start with a <code>\\</code>.</p> <p>For instance for the INDEX field, you can do the following (See <code>Index Field for list of available options &lt;https://support.office.com/en-us/article/Field-codes-Index-field-adafcf4a-cb30-43f6-85c7-743da1635d9e?ui=en-US&amp;rs=en-US&amp;ad=US&gt;</code>_ ):</p> <pre><code>&lt;?php\n\n// the $fieldText can be either a simple string\n$fieldText = 'The index value';\n\n// or a 'TextRun', to be able to format the text you want in the index\n$fieldText = new TextRun();\n$fieldText-&gt;addText('My ');\n$fieldText-&gt;addText('bold index', ['bold' =&gt; true]);\n$fieldText-&gt;addText(' entry');\n$section-&gt;addField('XE', array(), array(), $fieldText);\n\n// this actually adds the index\n$section-&gt;addField('INDEX', array(), array('\\\\e \"   \" \\\\h \"A\" \\\\c \"3\"'), 'right click to update index');\n\n// Adding reference to a bookmark\n$fieldText-&gt;addField('REF', [\n    'name' =&gt; 'bookmark'\n], [\n    'InsertParagraphNumberRelativeContext',\n    'CreateHyperLink',\n]);\n</code></pre>"},{"location":"usage/elements/formula.html","title":"Formula","text":"<p>Formula can be added using</p> <pre><code>&lt;?php\n\nuse PhpOffice\\Math\\Element;\nuse PhpOffice\\Math\\Math;\n\n$fraction = new Element\\Fraction();\n$fraction\n    -&gt;setDenominator(new Element\\Numeric(2))\n    -&gt;setNumerator(new Element\\Identifier('\u03c0'))\n;\n\n$math = new Math();\n$math-&gt;add($fraction);\n\n$formula = $section-&gt;addFormula($math);\n</code></pre>"},{"location":"usage/elements/image.html","title":"Image","text":"<p>To add an image, use the <code>addImage</code> method to sections, headers, footers, textruns, or table cells.</p> <pre><code>&lt;?php\n\n$section-&gt;addImage($src, [$style]);\n</code></pre> <ul> <li><code>$src</code>. String path to a local image, URL of a remote image or the image data, as a string. Warning: Do not pass user-generated strings here, as that would allow an attacker to read arbitrary files or perform server-side request forgery by passing file paths or URLs instead of image data.</li> <li><code>$style</code>. See <code>Styles &gt; Image</code>.</li> </ul> <p>Examples:</p> <pre><code>&lt;?php\n\n$section = $phpWord-&gt;addSection();\n$section-&gt;addImage(\n    'mars.jpg',\n    array(\n        'width'         =&gt; 100,\n        'height'        =&gt; 100,\n        'marginTop'     =&gt; -1,\n        'marginLeft'    =&gt; -1,\n        'wrappingStyle' =&gt; 'behind'\n    )\n);\n$footer = $section-&gt;addFooter();\n$footer-&gt;addImage('http://example.com/image.php');\n$textrun = $section-&gt;addTextRun();\n$textrun-&gt;addImage('http://php.net/logo.jpg');\n$source = file_get_contents('/path/to/my/images/earth.jpg');\n$textrun-&gt;addImage($source);\n</code></pre>"},{"location":"usage/elements/line.html","title":"Line","text":"<p>Line elements can be added to sections by using <code>addLine</code>.</p> <pre><code>&lt;?php\n\n$lineStyle = array('weight' =&gt; 1, 'width' =&gt; 100, 'height' =&gt; 0, 'color' =&gt; 635552);\n$section-&gt;addLine($lineStyle);\n</code></pre> <p>Available line style attributes:</p> <ul> <li><code>weight</code>. Line width in twip.</li> <li><code>color</code>. Defines the color of stroke.</li> <li><code>dash</code>. Line types: dash, rounddot, squaredot, dashdot, longdash, longdashdot, longdashdotdot.</li> <li><code>beginArrow</code>. Start type of arrow: block, open, classic, diamond, oval.</li> <li><code>endArrow</code>. End type of arrow: block, open, classic, diamond, oval.</li> <li><code>width</code>. Line-object width in pt.</li> <li><code>height</code>. Line-object height in pt.</li> <li><code>flip</code>. Flip the line element: true, false.</li> </ul>"},{"location":"usage/elements/link.html","title":"Link","text":"<p>You can add Hyperlinks to the document by using the function addLink:</p> <pre><code>&lt;?php\n\n$section-&gt;addLink($linkSrc, [$linkName], [$fontStyle], [$paragraphStyle]);\n</code></pre> <ul> <li><code>$linkSrc</code>. The URL of the link.</li> <li><code>$linkName</code>. Placeholder of the URL that appears in the document.</li> <li><code>$fontStyle</code>. See <code>Styles &gt; Font</code>.</li> <li><code>$paragraphStyle</code>. See <code>Styles &gt; Paragraph</code>.</li> </ul>"},{"location":"usage/elements/list.html","title":"List","text":"<p>Lists can be added by using <code>addListItem</code> and <code>addListItemRun</code> methods. <code>addListItem</code> is used for creating lists that only contain plain text. <code>addListItemRun</code> is used for creating complex list items that contains texts with different style (some bold, other italics, etc) or other elements, e.g. images or links. The syntaxes are as follow:</p> <p>Basic usage:</p> <pre><code>&lt;?php\n\n$section-&gt;addListItem($text, [$depth], [$fontStyle], [$listStyle], [$paragraphStyle]);\n$listItemRun = $section-&gt;addListItemRun([$depth], [$listStyle], [$paragraphStyle])\n</code></pre> <p>Parameters:</p> <ul> <li><code>$text</code>. Text that appears in the document.</li> <li><code>$depth</code>. Depth of list item.</li> <li><code>$fontStyle</code>. See <code>Styles &gt; Font</code>..</li> <li><code>$listStyle</code>. List style of the current element TYPE_NUMBER,   TYPE_ALPHANUM, TYPE_BULLET_FILLED, etc. See list of constants in PHPWord\\Style\\ListItem.</li> <li><code>$paragraphStyle</code>. See <code>Styles &gt; Paragraph</code>..</li> </ul> <p>See <code>Sample_14_ListItem.php</code> for more code sample.</p> <p>Advanced usage:</p> <p>You can also create your own numbering style by changing the <code>$listStyle</code> parameter with the name of your numbering style.</p> <pre><code>&lt;?php\n\n$phpWord-&gt;addNumberingStyle(\n    'multilevel',\n    array(\n        'type' =&gt; 'multilevel',\n        'levels' =&gt; array(\n            array('format' =&gt; 'decimal', 'text' =&gt; '%1.', 'left' =&gt; 360, 'hanging' =&gt; 360, 'tabPos' =&gt; 360),\n            array('format' =&gt; 'upperLetter', 'text' =&gt; '%2.', 'left' =&gt; 720, 'hanging' =&gt; 360, 'tabPos' =&gt; 720),\n        )\n    )\n);\n$section-&gt;addListItem('List Item I', 0, null, 'multilevel');\n$section-&gt;addListItem('List Item I.a', 1, null, 'multilevel');\n$section-&gt;addListItem('List Item I.b', 1, null, 'multilevel');\n$section-&gt;addListItem('List Item II', 0, null, 'multilevel');\n</code></pre> <p>For available styling options see <code>Styles &gt; Numbering Level</code>.</p>"},{"location":"usage/elements/note.html","title":"Footnote &amp; Endnote","text":"<p>You can create footnotes with <code>addFootnote</code> and endnotes with<code>addEndnote</code> in texts or textruns, but it's recommended to use textrun to have better layout. You can use <code>addText</code>, <code>addLink</code>,<code>addTextBreak</code>, <code>addImage</code>, <code>addOLEObject</code> on footnotes and endnotes.</p> <p>On textrun:</p> <pre><code>&lt;?php\n\n$textrun = $section-&gt;addTextRun();\n$textrun-&gt;addText('Lead text.');\n$footnote = $textrun-&gt;addFootnote();\n$footnote-&gt;addText('Footnote text can have ');\n$footnote-&gt;addLink('http://test.com', 'links');\n$footnote-&gt;addText('.');\n$footnote-&gt;addTextBreak();\n$footnote-&gt;addText('And text break.');\n$textrun-&gt;addText('Trailing text.');\n$endnote = $textrun-&gt;addEndnote();\n$endnote-&gt;addText('Endnote put at the end');\n</code></pre> <p>On text:</p> <pre><code>&lt;?php\n\n$section-&gt;addText('Lead text.');\n$footnote = $section-&gt;addFootnote();\n$footnote-&gt;addText('Footnote text.');\n</code></pre> <p>By default the footnote reference number will be displayed with decimal number starting from 1. This number uses the <code>FooterReference</code> style which you can redefine with the <code>addFontStyle</code> method. Default value for this style is <code>array('superScript' =&gt; true)</code>;</p> <p>The footnote numbering can be controlled by setting the FootnoteProperties on the Section.</p> <pre><code>&lt;?php\n\n$fp = new \\PhpOffice\\PhpWord\\ComplexType\\FootnoteProperties();\n//sets the position of the footnote (pageBottom (default), beneathText, sectEnd, docEnd)\n$fp-&gt;setPos(\\PhpOffice\\PhpWord\\ComplexType\\FootnoteProperties::POSITION_BENEATH_TEXT);\n//set the number format to use (decimal (default), upperRoman, upperLetter, ...)\n$fp-&gt;setNumFmt(\\PhpOffice\\PhpWord\\SimpleType\\NumberFormat::LOWER_ROMAN);\n//force starting at other than 1\n$fp-&gt;setNumStart(2);\n//when to restart counting (continuous (default), eachSect, eachPage)\n$fp-&gt;setNumRestart(\\PhpOffice\\PhpWord\\ComplexType\\FootnoteProperties::RESTART_NUMBER_EACH_PAGE);\n//And finaly, set it on the Section\n$section-&gt;setFootnoteProperties($fp);\n</code></pre>"},{"location":"usage/elements/oleobject.html","title":"Object","text":"<p>You can add OLE embeddings, such as Excel spreadsheets or PowerPoint presentations to the document by using <code>addOLEObject</code> method.</p> <pre><code>&lt;?php\n\n$section-&gt;addOLEObject($src, [$style]);\n</code></pre>"},{"location":"usage/elements/pagebreak.html","title":"Page breaks","text":"<p>There are two ways to insert a page break, using the <code>addPageBreak</code> method or using the <code>pageBreakBefore</code> style of paragraph.</p> <pre><code>&lt;?php\n\n$section-&gt;addPageBreak();\n</code></pre>"},{"location":"usage/elements/preservetext.html","title":"Preserve text","text":"<p>The <code>addPreserveText</code> method is used to add a page number or page count to headers or footers.</p> <pre><code>&lt;?php\n\n$footer-&gt;addPreserveText('Page {PAGE} of {NUMPAGES}.');\n</code></pre>"},{"location":"usage/elements/ruby.html","title":"Ruby","text":"<p>Ruby (phonetic guide) text can be added by using the <code>addRuby</code> method. Ruby elements require a <code>RubyProperties</code> object, a <code>TextRun</code> for the base text, and a <code>TextRun</code> for the actual ruby (phonetic guide) text.</p> <p>Here is one example for a complete ruby element setup:</p> <pre><code>&lt;?php\n$phpWord = new PhpWord();\n\n$section = $phpWord-&gt;addSection();\n$properties = new RubyProperties();\n$properties-&gt;setAlignment(RubyProperties::ALIGNMENT_RIGHT_VERTICAL);\n$properties-&gt;setFontFaceSize(10);\n$properties-&gt;setFontPointsAboveBaseText(4);\n$properties-&gt;setFontSizeForBaseText(18);\n$properties-&gt;setLanguageId('ja-JP');\n\n$baseTextRun = new TextRun(null);\n$baseTextRun-&gt;addText('\u79c1');\n$rubyTextRun = new TextRun(null);\n$rubyTextRun-&gt;addText('\u308f\u305f\u3057');\n\n$section-&gt;addRuby($baseTextRun, $rubyTextRun, $properties);\n</code></pre> <ul> <li><code>$baseTextRun</code>. <code>TextRun</code> to be used for the base text.</li> <li><code>$rubyTextRun</code>. <code>TextRun</code> to be used for the ruby text.</li> <li><code>$properties</code>. <code>RubyProperties</code> properties object for the ruby text.</li> </ul> <p>A title with a phonetic guide is a little more complex, but still possible. Make sure you add the appropraite title style to your document.</p> <pre><code>$phpWord = new PhpWord();\n$fontStyle = new Font();\n$fontStyle-&gt;setAllCaps(true);\n$fontStyle-&gt;setBold(true);\n$fontStyle-&gt;setSize(24);\n$phpWord-&gt;addTitleStyle(1, ['name' =&gt; 'Arial', 'size' =&gt; 24, 'bold' =&gt; true, 'color' =&gt; '990000']);\n\n$section = $phpWord-&gt;addSection();\n$properties = new RubyProperties();\n$properties-&gt;setAlignment(RubyProperties::ALIGNMENT_RIGHT_VERTICAL);\n$properties-&gt;setFontFaceSize(10);\n$properties-&gt;setFontPointsAboveBaseText(4);\n$properties-&gt;setFontSizeForBaseText(18);\n$properties-&gt;setLanguageId('ja-JP');\n\n$baseTextRun = new TextRun(null);\n$baseTextRun-&gt;addText('\u79c1');\n$rubyTextRun = new TextRun(null);\n$rubyTextRun-&gt;addText('\u308f\u305f\u3057');\n\n$textRun = new TextRun();\n$textRun-&gt;addRuby($baseTextRun, $rubyTextRun, $properties);\n$section-&gt;addTitle($textRun, 1);\n</code></pre>"},{"location":"usage/elements/table.html","title":"Table","text":"<p>To add tables, rows, and cells, use the <code>addTable</code>, <code>addRow</code>, and <code>addCell</code> methods:</p> <pre><code>&lt;?php\n\n$table = $section-&gt;addTable([$tableStyle]);\n$table-&gt;addRow([$height], [$rowStyle]);\n$cell = $table-&gt;addCell($width, [$cellStyle]);\n</code></pre> <p>Table style can be defined with <code>addTableStyle</code>:</p> <pre><code>&lt;?php\n\n$tableStyle = array(\n    'borderColor' =&gt; '006699',\n    'borderSize'  =&gt; 6,\n    'cellMargin'  =&gt; 50\n);\n$firstRowStyle = array('bgColor' =&gt; '66BBFF');\n$phpWord-&gt;addTableStyle('myTable', $tableStyle, $firstRowStyle);\n$table = $section-&gt;addTable('myTable');\n</code></pre> <p>For available styling options see <code>Styles &gt; Table</code>.</p>"},{"location":"usage/elements/table.html#cell-span","title":"Cell span","text":"<p>You can span a cell on multiple columns by using <code>gridSpan</code> or multiple rows by using <code>vMerge</code>.</p> <pre><code>&lt;?php\n\n$cell = $table-&gt;addCell(200);\n$cell-&gt;getStyle()-&gt;setGridSpan(5);\n</code></pre> <p>See <code>Sample_09_Tables.php</code> for more code sample.</p>"},{"location":"usage/elements/text.html","title":"Text","text":"<p>Text can be added by using <code>addText</code> and <code>addTextRun</code> methods. <code>addText</code> is used for creating simple paragraphs that only contain texts with the same style. <code>addTextRun</code> is used for creating complex paragraphs that contain text with different style (some bold, other italics, etc) or other elements, e.g. images or links. The syntaxes are as follow:</p> <pre><code>&lt;?php\n\n$section-&gt;addText($text, [$fontStyle], [$paragraphStyle]);\n$textrun = $section-&gt;addTextRun([$paragraphStyle]);\n</code></pre> <ul> <li><code>$text</code>. Text to be displayed in the document.</li> <li><code>$fontStyle</code>. See <code>Styles &gt; Font</code>.</li> <li><code>$paragraphStyle</code>. See <code>Styles &gt; Paragraph</code>.</li> </ul> <p>For available styling options, see <code>Styles &gt; Font</code> and <code>Styles &gt; Paragraph</code>.</p> <p>If you want to enable track changes on added text you can mark it as INSERTED or DELETED by a specific user at a given time:</p> <pre><code>&lt;?php\n\n$text = $section-&gt;addText('Hello World!');\n$text-&gt;setChanged(\\PhpOffice\\PhpWord\\Element\\ChangedElement::TYPE_INSERTED, 'Fred', (new \\DateTime()));\n</code></pre>"},{"location":"usage/elements/textbox.html","title":"TextBox","text":"<p>To Be Completed... </p>"},{"location":"usage/elements/textbreak.html","title":"Text breaks","text":"<p>Text breaks are empty new lines. To add text breaks, use the following syntax. All parameters are optional.</p> <pre><code>&lt;?php\n\n$section-&gt;addTextBreak([$breakCount], [$fontStyle], [$paragraphStyle]);\n</code></pre> <ul> <li><code>$breakCount</code>. How many lines.</li> <li><code>$fontStyle</code>. See <code>Styles &gt; Font</code>.</li> <li><code>$paragraphStyle</code>. See <code>Styles &gt; Paragraph</code>.</li> </ul>"},{"location":"usage/elements/title.html","title":"Title","text":"<p>If you want to structure your document or build table of contents, you need titles or headings. To add a title to the document, use the <code>addTitleStyle</code> and <code>addTitle</code> method. If <code>depth</code> is 0, a Title will be inserted, otherwise a Heading1, Heading2, ...</p> <pre><code>&lt;?php\n\n$phpWord-&gt;addTitleStyle($depth, [$fontStyle], [$paragraphStyle]);\n$section-&gt;addTitle($text, $depth, $pageNumber);\n</code></pre> <p><code>addTitleStyle</code> : - <code>$depth</code> - <code>$fontStyle</code>: See <code>Styles &gt; Font</code>. - <code>$paragraphStyle</code>: See <code>Styles &gt; Paragraph</code>.</p> <p><code>addTitle</code> : - <code>$text</code>. Text to be displayed in the document. This can be <code>string</code> or a <code>\\PhpOffice\\PhpWord\\Element\\TextRun</code> - <code>$depth</code> - <code>$pageNumber</code> : Number of the page</p> <p>It's necessary to add a title style to your document because otherwise the title won't be detected as a real title.</p>"},{"location":"usage/elements/toc.html","title":"Table of contents","text":"<p>To add a table of contents (TOC), you can use the <code>addTOC</code> method. Your TOC can only be generated if you have add at least one title (See \"Title\").</p> <pre><code>&lt;?php\n\n$section-&gt;addTOC([$fontStyle], [$tocStyle], [$minDepth], [$maxDepth]);\n</code></pre> <ul> <li><code>$fontStyle</code>. See font style section.</li> <li><code>$tocStyle</code>. See available options below.</li> <li><code>$minDepth</code>. Minimum depth of header to be shown. Default 1.</li> <li><code>$maxDepth</code>. Maximum depth of header to be shown. Default 9.</li> </ul> <p>Options for <code>$tocStyle</code>:</p> <ul> <li><code>tabLeader</code>. Fill type between the title text and the page number. Use the defined constants in <code>\\PhpOffice\\PhpWord\\Style\\TOC</code>.</li> <li><code>tabPos</code>. The position of the tab where the page number appears in twip.</li> <li><code>indent</code>. The indent factor of the titles in twip.</li> </ul>"},{"location":"usage/elements/trackchanges.html","title":"Track Changes","text":"<p>Track changes can be set on text elements. There are 2 ways to set the change information on an element. Either by calling the <code>setChangeInfo()</code>, or by setting the <code>TrackChange</code> instance on the element with <code>setTrackChange()</code>.</p> <pre><code>&lt;?php\n\n$phpWord = new \\PhpOffice\\PhpWord\\PhpWord();\n\n// New portrait section\n$section = $phpWord-&gt;addSection();\n$textRun = $section-&gt;addTextRun();\n\n$text = $textRun-&gt;addText('Hello World! Time to ');\n\n$text = $textRun-&gt;addText('wake ', array('bold' =&gt; true));\n$text-&gt;setChangeInfo(TrackChange::INSERTED, 'Fred', time() - 1800);\n\n$text = $textRun-&gt;addText('up');\n$text-&gt;setTrackChange(new TrackChange(TrackChange::INSERTED, 'Fred'));\n\n$text = $textRun-&gt;addText('go to sleep');\n$text-&gt;setChangeInfo(TrackChange::DELETED, 'Barney', new \\DateTime('@' . (time() - 3600)));\n</code></pre>"},{"location":"usage/elements/watermark.html","title":"Watermark","text":"<p>To add a watermark (or page background image), your section needs a header reference. After creating a header, you can use the <code>addWatermark</code> method to add a watermark.</p> <pre><code>&lt;?php\n\n$section = $phpWord-&gt;addSection();\n$header = $section-&gt;addHeader();\n$header-&gt;addWatermark('resources/_earth.jpg', array('marginTop' =&gt; 200, 'marginLeft' =&gt; 55));\n</code></pre>"},{"location":"usage/styles/chart.html","title":"Chart","text":"<p>Available Chart style options:</p> <ul> <li><code>width</code>. Width (in EMU).</li> <li><code>height</code>. Height (in EMU).</li> <li><code>3d</code>. Is 3D; applies to pie, bar, line, area, true or false.</li> <li><code>colors</code>. A list of colors to use in the chart.</li> <li><code>title</code>. The title for the chart.</li> <li><code>showLegend</code>. Show legend, true or false.</li> <li><code>LegendPosition</code>. Legend position, r (default), b, t, l or tr.</li> <li><code>categoryLabelPosition</code>. Label position for categories, nextTo (default), low or high.</li> <li><code>valueLabelPosition</code>. Label position for values, nextTo (default), low or high.</li> <li><code>categoryAxisTitle</code>. The title for the category axis.</li> <li><code>valueAxisTitle</code>. The title for the values axis.</li> <li><code>majorTickMarkPos</code>. The position for major tick marks, in, out, cross, none (default).</li> <li><code>showAxisLabels</code>. Show labels for axis, true or false.</li> <li><code>gridX</code>. Show Gridlines for X-Axis, true or false.</li> <li><code>gridY</code>. Show Gridlines for Y-Axis, true or false.</li> </ul>"},{"location":"usage/styles/font.html","title":"Font","text":"<p>Available Font style options:</p> <ul> <li><code>allCaps</code>. All caps, true or false.</li> <li><code>bgColor</code>. Font background color, e.g. FF0000.</li> <li><code>bold</code>. Bold, true or false.</li> <li><code>color</code>. Font color, e.g. FF0000.</li> <li><code>doubleStrikethrough</code>. Double strikethrough, true or false.</li> <li><code>fgColor</code>. Font highlight color, e.g. yellow, green, blue.    See <code>\\PhpOffice\\PhpWord\\Style\\Font::FGCOLOR_...</code> class constants for possible values</li> <li><code>hint</code>. Font content type, default, eastAsia, or cs.</li> <li><code>italic</code>. Italic, true or false.</li> <li><code>name</code>. Font name, e.g. Arial.</li> <li><code>rtl</code>. Right to Left language, true or false.</li> <li><code>size</code>. Font size, e.g. 20, 22.</li> <li><code>smallCaps</code>. Small caps, true or false.</li> <li><code>strikethrough</code>. Strikethrough, true or false.</li> <li><code>subScript</code>. Subscript, true or false.</li> <li><code>superScript</code>. Superscript, true or false.</li> <li><code>underline</code>. Underline, single, dash, dotted, etc.    See <code>\\PhpOffice\\PhpWord\\Style\\Font::UNDERLINE_...</code> class constants for possible values</li> <li><code>lang</code>. Language, either a language code like en-US, fr-BE, etc. or an object (or as an array) if you need to set eastAsian or bidirectional languages    See <code>\\PhpOffice\\PhpWord\\Style\\Language</code> class for some language codes.</li> <li><code>position</code>. The text position, raised or lowered, in half points</li> <li><code>hidden</code>. Hidden text, true or false.</li> <li><code>whiteSpace</code>. How white space is handled when generating html/pdf. Possible values are pre-wrap and normal (other css values for white space are accepted, but are not expected to be useful).</li> <li><code>fallbackFont</code>. Fallback generic font for html/pdf. Possible values are sans-serif, serif, and monospace (other css values for generic fonts are accepted).</li> </ul>"},{"location":"usage/styles/image.html","title":"Image","text":"<p>Available Image style options:</p> <ul> <li><code>alignment</code>. See <code>\\PhpOffice\\PhpWord\\SimpleType\\Jc</code> class for the details.</li> <li><code>height</code>. Height in pt.</li> <li><code>marginLeft</code>. Left margin in inches, can be negative.</li> <li><code>marginTop</code>. Top margin in inches, can be negative.</li> <li><code>width</code>. Width in pt.</li> <li><code>wrappingStyle</code>. Wrapping style, inline, square, tight, behind, or infront.</li> <li><code>wrapDistanceTop</code>. Top text wrapping in pixels.</li> <li><code>wrapDistanceBottom</code>. Bottom text wrapping in pixels.</li> <li><code>wrapDistanceLeft</code>. Left text wrapping in pixels.</li> <li><code>wrapDistanceRight</code>. Right text wrapping in pixels.</li> </ul>"},{"location":"usage/styles/numberinglevel.html","title":"Numbering level","text":"<p>Available NumberingLevel style options:</p> <ul> <li><code>alignment</code>. Supports all alignment modes since 1st Edition of ECMA-376 standard up till ISO/IEC 29500:2012.    See <code>\\PhpOffice\\PhpWord\\SimpleType\\Jc</code> class constants for possible values.</li> <li><code>font</code>. Font name.</li> <li><code>format</code>. Numbering format bullet|decimal|upperRoman|lowerRoman|upperLetter|lowerLetter.</li> <li><code>hanging</code>. See paragraph style.</li> <li><code>hint</code>. See font style.</li> <li><code>left</code>. See paragraph style.</li> <li><code>restart</code>. Restart numbering level symbol.</li> <li><code>start</code>. Starting value.</li> <li><code>suffix</code>. Content between numbering symbol and paragraph text tab|space|nothing.</li> <li><code>tabPos</code>. See paragraph style.</li> <li><code>text</code>. Numbering level text e.g. %1 for nonbullet or bullet character.</li> </ul>"},{"location":"usage/styles/paragraph.html","title":"Paragraph","text":"<p>Available Paragraph style options:</p> <ul> <li><code>alignment</code>. Supports all alignment modes since 1st Edition of ECMA-376 standard up till ISO/IEC 29500:2012.    See <code>\\PhpOffice\\PhpWord\\SimpleType\\Jc</code> class constants for possible values.</li> <li><code>basedOn</code>. Parent style.</li> <li><code>hanging</code>. Hanging indentation in half inches.</li> <li><code>indent</code>. Indent (left indentation) in half inches.</li> <li><code>indentation</code>. An array of indentation key =&gt; value pairs in twip. Supports left, right, firstLine and hanging indentation.    See <code>\\PhpOffice\\PhpWord\\Style\\Indentation</code> for possible identation types.</li> <li><code>keepLines</code>. Keep all lines on one page, true or false.</li> <li><code>keepNext</code>. Keep paragraph with next paragraph, true or false.</li> <li><code>lineHeight</code>. Text line height, e.g. 1.0, 1.5, etc.</li> <li><code>next</code>. Style for next paragraph.</li> <li><code>pageBreakBefore</code>. Start paragraph on next page, true or false.</li> <li><code>spaceBefore</code>. Space before paragraph in twip.</li> <li><code>spaceAfter</code>. Space after paragraph in twip.</li> <li><code>spacing</code>. Space between lines in twip. If spacingLineRule is auto, 240 (height of 1 line) will be added, so if you want a double line height, set this to 240.</li> <li><code>spacingLineRule</code>. Line Spacing Rule. auto, exact, atLeast    See <code>\\PhpOffice\\PhpWord\\SimpleType\\LineSpacingRule</code> class constants for possible values.</li> <li><code>suppressAutoHyphens</code>. Hyphenation for paragraph, true or false.</li> <li><code>tabs</code>. Set of custom tab stops.</li> <li><code>widowControl</code>. Allow first/last line to display on a separate page, true or false.</li> <li><code>contextualSpacing</code>. Ignore Spacing Above and Below When Using Identical Styles, true or false.</li> <li><code>bidi</code>. Right to Left Paragraph Layout, true or false.</li> <li><code>shading</code>. Paragraph Shading.</li> <li><code>textAlignment</code>. Vertical Character Alignment on Line.    See <code>\\PhpOffice\\PhpWord\\SimpleType\\TextAlignment</code> class constants for possible values.</li> </ul>"},{"location":"usage/styles/section.html","title":"Section","text":"<p>Available Section style options:</p> <ul> <li><code>borderBottomColor</code>. Border bottom color.</li> <li><code>borderBottomSize</code>. Border bottom size in twip.</li> <li><code>borderLeftColor</code>. Border left color.</li> <li><code>borderLeftSize</code>. Border left size in twip.</li> <li><code>borderRightColor</code>. Border right color.</li> <li><code>borderRightSize</code>. Border right size in twip.</li> <li><code>borderTopColor</code>. Border top color.</li> <li><code>borderTopSize</code>. Border top size in twip.</li> <li><code>breakType</code>. Section break type (nextPage, nextColumn, continuous, evenPage, oddPage).</li> <li><code>colsNum</code>. Number of columns.</li> <li><code>colsSpace</code>. Spacing between columns.</li> <li><code>footerHeight</code>. Spacing to bottom of footer.</li> <li><code>gutter</code>. Page gutter spacing.</li> <li><code>headerHeight</code>. Spacing to top of header.</li> <li><code>marginTop</code>. Page margin top in twip.</li> <li><code>marginLeft</code>. Page margin left in twip.</li> <li><code>marginRight</code>. Page margin right in twip.</li> <li><code>marginBottom</code>. Page margin bottom in twip.</li> <li><code>orientation</code>. Page orientation (<code>portrait</code>, which is default, or <code>landscape</code>).    See <code>\\PhpOffice\\PhpWord\\Style\\Section::ORIENTATION_...</code> class constants for possible values</li> <li><code>pageSizeH</code>. Page height in twip. Implicitly defined by <code>orientation</code> option. Any changes are discouraged.</li> <li><code>pageSizeW</code>. Page width in twip. Implicitly defined by <code>orientation</code> option. Any changes are discouraged.</li> <li><code>vAlign</code>. Vertical Page Alignment    See <code>\\PhpOffice\\PhpWord\\SimpleType\\VerticalJc</code> for possible values</li> </ul>"},{"location":"usage/styles/table.html","title":"Table","text":"<p>Available Table style options:</p> <ul> <li><code>alignment</code>. Supports all alignment modes since 1st Edition of ECMA-376 standard up till ISO/IEC 29500:2012.    See <code>\\PhpOffice\\PhpWord\\SimpleType\\JcTable</code> and <code>\\PhpOffice\\PhpWord\\SimpleType\\Jc</code> class constants for possible values.</li> <li><code>bgColor</code>. Background color, e.g. '9966CC'.</li> <li><code>border(Top|Right|Bottom|Left)Color</code>. Border color, e.g. '9966CC'.</li> <li><code>border(Top|Right|Bottom|Left)Size</code>. Border size in twip.</li> <li><code>cellMargin(Top|Right|Bottom|Left)</code>. Cell margin in twip.</li> <li><code>indent</code>. Table indent from leading margin. Must be an instance of <code>\\PhpOffice\\PhpWord\\ComplexType\\TblWidth</code>.</li> <li><code>width</code>. Table width in Fiftieths of a Percent or Twentieths of a Point.</li> <li><code>unit</code>. The unit to use for the width. One of <code>\\PhpOffice\\PhpWord\\SimpleType\\TblWidth</code>. Defaults to auto.</li> <li><code>layout</code>. Table layout, either fixed or autofit  See <code>\\PhpOffice\\PhpWord\\Style\\Table</code> for constants.</li> <li><code>cellSpacing</code> Cell spacing in twip</li> <li><code>position</code> Floating Table Positioning, see below for options</li> <li><code>bidiVisual</code> Present table as Right-To-Left</li> </ul> <p>Floating Table Positioning options:</p> <ul> <li><code>leftFromText</code> Distance From Left of Table to Text in twip</li> <li><code>rightFromText</code> Distance From Right of Table to Text in twip</li> <li><code>topFromText</code> Distance From Top of Table to Text in twip</li> <li><code>bottomFromText</code> Distance From Top of Table to Text in twip</li> <li><code>vertAnchor</code> Table Vertical Anchor, one of <code>\\PhpOffice\\PhpWord\\Style\\TablePosition::VANCHOR_*</code></li> <li><code>horzAnchor</code> Table Horizontal Anchor, one of <code>\\PhpOffice\\PhpWord\\Style\\TablePosition::HANCHOR_*</code></li> <li><code>tblpXSpec</code> Relative Horizontal Alignment From Anchor, one of <code>\\PhpOffice\\PhpWord\\Style\\TablePosition::XALIGN_*</code></li> <li><code>tblpX</code> Absolute Horizontal Distance From Anchorin twip</li> <li><code>tblpYSpec</code> Relative Vertical Alignment From Anchor, one of <code>\\PhpOffice\\PhpWord\\Style\\TablePosition::YALIGN_*</code></li> <li><code>tblpY</code> Absolute Vertical Distance From Anchorin twip</li> </ul> <p>Available Row style options:</p> <ul> <li><code>cantSplit</code>. Table row cannot break across pages, true or false.</li> <li><code>exactHeight</code>. Row height is exact or at least.</li> <li><code>tblHeader</code>. Repeat table row on every new page, true or false.</li> </ul> <p>Available Cell style options:</p> <ul> <li><code>bgColor</code>. Background color, e.g. '9966CC'.</li> <li><code>border(Top|Right|Bottom|Left)Color</code>. Border color, e.g. '9966CC'.</li> <li><code>border(Top|Right|Bottom|Left)Size</code>. Border size in twip.</li> <li><code>border(Top|Right|Bottom|Left)Style</code>. Border style. You can use constants from <code>\\PhpOffice\\PhpWord\\SimpleType\\Border</code></li> <li><code>gridSpan</code>. Number of columns spanned.</li> <li><code>textDirection(btLr|tbRl)</code>. Direction of text.    You can use constants <code>\\PhpOffice\\PhpWord\\Style\\Cell::TEXT_DIR_BTLR</code> and <code>\\PhpOffice\\PhpWord\\Style\\Cell::TEXT_DIR_TBRL</code></li> <li><code>valign</code>. Vertical alignment, top, center, both, bottom.</li> <li><code>vMerge</code>. restart or continue.</li> <li><code>width</code>. Cell width in twip.</li> </ul>"}]}